# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from spacetradersapi.api_helper import APIHelper


class SystemsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SystemsControllerTests, cls).setUpClass()
        cls.controller = cls.client.systems
        cls.response_catcher = cls.controller.http_call_back

    # Return a list of all systems.
    def test_get_systems(self):

        # Perform the API call through the SDK function
        result = self.controller.get_systems()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize('{"data":[{"symbol":"X1-OE","sector":"X1","type":"RED_STAR","x":0,"'
            'y":0,"waypoints":["X1-OE-PM","X1-OE-PM01","X1-OE-A005","X1-OE-25X"'
            '],"factions":["COMMERCE_REPUBLIC","MINERS_COLLECTIVE","SPACERS_GUI'
            'LD"],"charted":true,"chartedBy":null}],"meta":{"total":0,"page":0,'
            '"limit":0}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))

    # View System
    def test_get_systems_system_symbol(self):
        # Parameters for the API call
        system_symbol = 'X1-OE'

        # Perform the API call through the SDK function
        result = self.controller.get_systems_system_symbol(system_symbol)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize('{"data":{"symbol":"X1-ZZ","sector":"X1","type":"BLUE_STAR","x":-2,'
            '"y":9,"waypoints":[],"factions":[],"charted":false,"chartedBy":nul'
            'l}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))

