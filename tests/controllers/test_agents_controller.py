# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from spacetradersapi.api_helper import APIHelper
from spacetradersapi.models.agents_request import AgentsRequest


class AgentsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(AgentsControllerTests, cls).setUpClass()
        cls.controller = cls.client.agents
        cls.response_catcher = cls.controller.http_call_back

    # Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your starting faction if you don't know any other factions to choose from.
    #
    #The agent symbol is a 4-8 character string that will represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
    #
    #A new agent will be granted an authorization token, a contract with their starting faction, a command ship with a jump drive, and one hundred thousand credits.
    #
    #> #### Keep your token safe and secure
    #>
    #> Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
    #
    #You can accept your contract using the `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to a nearby asteroid field waypoint, and execute the `/my/ships/{shipSymbol}/accept` endpoint to mine various types of ores and minerals.
    #
    #Return to the contract destination and execute the `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract.
    #
    #When your contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
    def test_post_agents(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.post_agents(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 201)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize('{"data":{"token":"string","agent":{"accountId":"cl0hok34m0003ks0jj'
            'ql5q8f2","symbol":"EMBER","headquarters":"X1-OE-PM","credits":0},"'
            'faction":{"symbol":"COMMERCE_REPUBLIC","name":"Commerce Repubic","'
            'description":"The Commerce Republic takes capital from top tier wo'
            'rlds and invests it into new systems with high potential for growt'
            'h.","headquarters":"X1-OE-PM","traits":["BUREAUCRATIC","CAPITALIST'
            'IC","GUILD","ESTABLISHED"]},"contract":{"id":"cl0hok38t0014ks0jnoy'
            '8o5vh","faction":"COMMERCE_REPUBLIC","type":"PROCUREMENT","terms":'
            '{"deadline":"2022-03-11T05:16:59.113Z","payment":{"onAccepted":200'
            '00,"onFulfilled":100000},"deliver":[{"tradeSymbol":"IRON_ORE","des'
            'tination":"X1-OE-PM","units":10000,"fulfilled":0}]},"accepted":fal'
            'se,"fulfilled":false,"expiresAt":"2022-03-09T05:16:59.112Z"},"ship'
            '":{"symbol":"string","frame":"string","reactor":"string","engine":'
            '"string","fuel":0,"modules":["string"],"mounts":["string"],"regist'
            'ration":{"factionSymbol":"string","agentSymbol":"string","fee":0,"'
            'role":"string"},"integrity":{"frame":0,"reactor":0,"engine":0},"st'
            'atus":"string","location":"string","cargo":[{"tradeSymbol":"string'
            '","units":0}]}}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))

    # Fetch your agent's details.
    def test_get_my_agent(self):

        # Perform the API call through the SDK function
        result = self.controller.get_my_agent()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        expected_body = APIHelper.json_deserialize('{"data":{"accountId":"cl0hok34m0003ks0jjql5q8f2","symbol":"EMBER",'
            '"headquarters":"X1-OE-PM","credits":0}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        self.assertTrue(TestHelper.match_body(expected_body, received_body))

