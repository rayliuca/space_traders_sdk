<?php
/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Tests;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\Exceptions;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use PHPUnit\Framework\TestCase;

class ContractsControllerTest extends TestCase
{
    /**
     * @var \SpaceTradersAPILib\Controllers\ContractsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getContractsController();
    }


    /**
     * List all of your contracts.
     */
    public function testTestGetMyContracts()
    {

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->getMyContracts();
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":[{"id":"cl0hok38t0014ks0jnoy8o5vh","faction":"COMMERCE_REPUBLIC","type":"PRO' .
                'CUREMENT","terms":{"deadline":"2022-03-11T05:16:59.113Z","payment":{"onAccepted":200' .
                '00,"onFulfilled":100000},"deliver":[{"tradeSymbol":"IRON_ORE","destination":"X1-OE-P' .
                'M","units":10000,"fulfilled":0}]},"accepted":false,"fulfilled":false,"expiresAt":"20' .
                '22-03-09T05:16:59.112Z"}],"meta":{"total":10,"page":1,"limit":10}}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
