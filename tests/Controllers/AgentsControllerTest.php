<?php
/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Tests;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\Exceptions;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use PHPUnit\Framework\TestCase;

class AgentsControllerTest extends TestCase
{
    /**
     * @var \SpaceTradersAPILib\Controllers\AgentsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getAgentsController();
    }


    /**
     * Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your starting faction if you don't know any other factions to choose from.

The agent symbol is a 4-8 character string that will represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.

A new agent will be granted an authorization token, a contract with their starting faction, a command ship with a jump drive, and one hundred thousand credits.

> #### Keep your token safe and secure
>
> Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.

You can accept your contract using the `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to a nearby asteroid field waypoint, and execute the `/my/ships/{shipSymbol}/accept` endpoint to mine various types of ores and minerals.

Return to the contract destination and execute the `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract.

When your contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
     */
    public function testTestPostAgents()
    {
        // Parameters for the API call
        $body = null;

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->postAgents($body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            201,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 201"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":{"token":"string","agent":{"accountId":"cl0hok34m0003ks0jjql5q8f2","symbol":' .
                '"EMBER","headquarters":"X1-OE-PM","credits":0},"faction":{"symbol":"COMMERCE_REPUBLI' .
                'C","name":"Commerce Repubic","description":"The Commerce Republic takes capital from' .
                ' top tier worlds and invests it into new systems with high potential for growth.","h' .
                'eadquarters":"X1-OE-PM","traits":["BUREAUCRATIC","CAPITALISTIC","GUILD","ESTABLISHED' .
                '"]},"contract":{"id":"cl0hok38t0014ks0jnoy8o5vh","faction":"COMMERCE_REPUBLIC","type' .
                '":"PROCUREMENT","terms":{"deadline":"2022-03-11T05:16:59.113Z","payment":{"onAccepte' .
                'd":20000,"onFulfilled":100000},"deliver":[{"tradeSymbol":"IRON_ORE","destination":"X' .
                '1-OE-PM","units":10000,"fulfilled":0}]},"accepted":false,"fulfilled":false,"expiresA' .
                't":"2022-03-09T05:16:59.112Z"},"ship":{"symbol":"string","frame":"string","reactor":' .
                '"string","engine":"string","fuel":0,"modules":["string"],"mounts":["string"],"regist' .
                'ration":{"factionSymbol":"string","agentSymbol":"string","fee":0,"role":"string"},"i' .
                'ntegrity":{"frame":0,"reactor":0,"engine":0},"status":"string","location":"string","' .
                'cargo":[{"tradeSymbol":"string","units":0}]}}}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Fetch your agent's details.
     */
    public function testTestGetMyAgent()
    {

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->getMyAgent();
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":{"accountId":"cl0hok34m0003ks0jjql5q8f2","symbol":"EMBER","headquarters":"X1' .
                '-OE-PM","credits":0}}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
