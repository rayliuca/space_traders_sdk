<?php
/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Tests;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\Exceptions;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use PHPUnit\Framework\TestCase;

class SystemsControllerTest extends TestCase
{
    /**
     * @var \SpaceTradersAPILib\Controllers\SystemsController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getSystemsController();
    }


    /**
     * Return a list of all systems.
     */
    public function testTestGetSystems()
    {

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->getSystems();
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":[{"symbol":"X1-OE","sector":"X1","type":"RED_STAR","x":0,"y":0,"waypoints":[' .
                '"X1-OE-PM","X1-OE-PM01","X1-OE-A005","X1-OE-25X"],"factions":["COMMERCE_REPUBLIC","M' .
                'INERS_COLLECTIVE","SPACERS_GUILD"],"charted":true,"chartedBy":null}],"meta":{"total"' .
                ':0,"page":0,"limit":0}}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * View System
     */
    public function testTestGetSystemsSystemSymbol()
    {
        // Parameters for the API call
        $systemSymbol = 'X1-OE';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->getSystemsSystemSymbol($systemSymbol);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = 'application/json' ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":{"symbol":"X1-ZZ","sector":"X1","type":"BLUE_STAR","x":-2,"y":9,"waypoints":' .
                '[],"factions":[],"charted":false,"chartedBy":null}}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
