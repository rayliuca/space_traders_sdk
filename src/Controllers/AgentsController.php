<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Controllers;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\ConfigurationInterface;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use SpaceTradersAPILib\Http\HttpRequest;
use SpaceTradersAPILib\Http\HttpResponse;
use SpaceTradersAPILib\Http\HttpMethod;
use SpaceTradersAPILib\Http\HttpContext;
use SpaceTradersAPILib\Http\HttpCallBack;
use Unirest\Request;

class AgentsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your starting
     * faction if you don't know any other factions to choose from.
     *
     * The agent symbol is a 4-8 character string that will represent your agent. This symbol will prefix
     * the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
     *
     * A new agent will be granted an authorization token, a contract with their starting faction, a
     * command ship with a jump drive, and one hundred thousand credits.
     *
     * > #### Keep your token safe and secure
     * >
     * > Save your token during the alpha phase. There is no way to regenerate this token without starting
     * a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders
     * website.
     *
     * You can accept your contract using the `/my/contracts/{contractId}/accept` endpoint. You will want
     * to navigate your command ship to a nearby asteroid field waypoint, and execute the
     * `/my/ships/{shipSymbol}/accept` endpoint to mine various types of ores and minerals.
     *
     * Return to the contract destination and execute the `/my/ships/{shipSymbol}/deliver` endpoint to
     * deposit goods into the contract.
     *
     * When your contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve
     * payment.
     *
     * @param Models\AgentsRequest|null $body
     *
     * @return Models\AgentsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postAgents(?Models\AgentsRequest $body = null): Models\AgentsResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/agents';

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'AgentsResponse');
    }

    /**
     * Fetch your agent's details.
     *
     * @return Models\MyAgentResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyAgent(): Models\MyAgentResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/agent';

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyAgentResponse');
    }
}
