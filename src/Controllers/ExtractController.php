<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Controllers;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\ConfigurationInterface;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use SpaceTradersAPILib\Http\HttpRequest;
use SpaceTradersAPILib\Http\HttpResponse;
use SpaceTradersAPILib\Http\HttpMethod;
use SpaceTradersAPILib\Http\HttpContext;
use SpaceTradersAPILib\Http\HttpCallBack;
use Unirest\Request;

class ExtractController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Extract resources from the waypoint into your ship. Send a survey as the payload to target specific
     * yields. The entire survey must be sent as it contains a signature that the backend verifies.
     *
     * @param string $shipSymbol The ship symbol
     * @param Models\MyShipsExtractRequest|null $body
     *
     * @return Models\MyShipsExtractResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postMyShipsShipSymbolExtract(
        string $shipSymbol,
        ?Models\MyShipsExtractRequest $body = null
    ): Models\MyShipsExtractResponse {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/extract';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol'   => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsExtractResponse');
    }

    /**
     * Get the status of your last extraction.
     *
     * @param string $shipSymbol The ship symbol
     *
     * @return Models\MyShipsExtractResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyShipsShipSymbolExtract(string $shipSymbol): Models\MyShipsExtractResponse1
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/extract';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol' => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsExtractResponse1');
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an
     * asteroid field, and send the survey in the body of the extract request. Each survey may have
     * multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of
     * extracting that resource.
     *
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire
     * after a period of time. Multiple ships can use the same survey for extraction.
     *
     * @param string $shipSymbol
     *
     * @return Models\MyShipsSurveyResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postMyShipsShipSymbolSurvey(string $shipSymbol): Models\MyShipsSurveyResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/survey';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol' => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsSurveyResponse');
    }

    /**
     * Executing a survey will initiate a cooldown for a number of seconds before you can call it again.
     * This endpoint returns the details of your cooldown, or a 404 if there is no cooldown for the survey
     * action.
     *
     * @param string $shipSymbol
     *
     * @return Models\MyShipsSurveyResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyShipsShipSymbolSurvey(string $shipSymbol): Models\MyShipsSurveyResponse1
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/survey';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol' => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsSurveyResponse1');
    }
}
