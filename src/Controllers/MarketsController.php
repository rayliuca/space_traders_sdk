<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Controllers;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\ConfigurationInterface;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use SpaceTradersAPILib\Http\HttpRequest;
use SpaceTradersAPILib\Http\HttpResponse;
use SpaceTradersAPILib\Http\HttpMethod;
use SpaceTradersAPILib\Http\HttpContext;
use SpaceTradersAPILib\Http\HttpCallBack;
use Unirest\Request;

class MarketsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Use this endpoint to deploy a Communications Relay to a waypoint. A waypoint with a communications
     * relay will allow agents to retrieve price information from the market. Without a relay, agents must
     * send a ship to a market to retrieve price information.
     *
     * Communication relays can be purchased from a market that exports `COMM_RELAY_I`.
     *
     * @param string $shipSymbol The ship symbol
     * @param Models\MyShipsDeployRequest|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postMyShipsShipSymbolDeploy(string $shipSymbol, ?Models\MyShipsDeployRequest $body = null): void
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/deploy';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol'   => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
    }

    /**
     * Trade Imports
     *
     * @param string $tradeSymbol The trade symbol
     *
     * @return Models\TradeImportsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTradeTradeSymbolImports(string $tradeSymbol): Models\TradeImportsResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/trade/{tradeSymbol}/imports';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'tradeSymbol' => $tradeSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TradeImportsResponse');
    }

    /**
     * Trade Exports
     *
     * @param string $tradeSymbol The trade symbol
     *
     * @return Models\TradeExportsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTradeTradeSymbolExports(string $tradeSymbol): Models\TradeExportsResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/trade/{tradeSymbol}/exports';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'tradeSymbol' => $tradeSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TradeExportsResponse');
    }

    /**
     * Trade Exchanges
     *
     * @param string $tradeSymbol The trade symbol
     *
     * @return Models\TradeExchangeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getTradeTradeSymbolExchange(string $tradeSymbol): Models\TradeExchangeResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/trade/{tradeSymbol}/exchange';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'tradeSymbol' => $tradeSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'TradeExchangeResponse');
    }

    /**
     * Retrieve a list of all charted markets in the given system. Markets are only available if the
     * waypoint is charted and contains a communications relay.
     *
     * To install a communications relay at a market, look at the `my/ships/{shipSymbol}/deploy` endpoint.
     *
     * @param string $systemSymbol The system symbol
     *
     * @return Models\SystemsMarketsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getSystemsSystemSymbolMarkets(string $systemSymbol): Models\SystemsMarketsResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/systems/{systemSymbol}/markets';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'systemSymbol' => $systemSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SystemsMarketsResponse');
    }

    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be
     * purchased, and exchange trades can be purchased or sold.
     *
     * Market data is only available if you have a ship at the location, or the location is charted and has
     * a communications relay deployed.
     *
     * See `/my/ships/{shipSymbol}/deploy` for deploying relays at a location.
     *
     * @param string $systemSymbol The system symbol
     * @param string $waypointSymbol The waypoint symbol
     *
     * @return Models\SystemsMarketsResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getSystemsSystemSymbolMarketsWaypointSymbol(
        string $systemSymbol,
        string $waypointSymbol
    ): Models\SystemsMarketsResponse1 {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/systems/{systemSymbol}/markets/{waypointSymbol}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'systemSymbol'   => $systemSymbol,
            'waypointSymbol' => $waypointSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'SystemsMarketsResponse1');
    }
}
