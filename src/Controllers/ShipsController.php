<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Controllers;

use SpaceTradersAPILib\Exceptions\ApiException;
use SpaceTradersAPILib\ConfigurationInterface;
use SpaceTradersAPILib\ApiHelper;
use SpaceTradersAPILib\Models;
use SpaceTradersAPILib\Http\HttpRequest;
use SpaceTradersAPILib\Http\HttpResponse;
use SpaceTradersAPILib\Http\HttpMethod;
use SpaceTradersAPILib\Http\HttpContext;
use SpaceTradersAPILib\Http\HttpCallBack;
use Unirest\Request;

class ShipsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Jettison cargo from your ship's cargo hold.
     *
     * @param string $shipSymbol
     * @param Models\MyShipsJettisonRequest|null $body
     *
     * @return Models\MyShipsJettisonResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postMyShipsShipSymbolJettison(
        string $shipSymbol,
        ?Models\MyShipsJettisonRequest $body = null
    ): Models\MyShipsJettisonResponse {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/jettison';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol'   => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsJettisonResponse');
    }

    /**
     * Execute a ship scan to view approach / departing ships, system information or details about a
     * waypoint. Send a scan mode to select the type of scan performed by your ship.
     *
     * @param string $shipSymbol
     * @param Models\MyShipsScanRequest|null $body
     *
     * @return Models\MyShipsScanResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function postMyShipsShipSymbolScan(
        string $shipSymbol,
        ?Models\MyShipsScanRequest $body = null
    ): Models\MyShipsScanResponse {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/scan';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol'   => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'Content-Type'    => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($body);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsScanResponse');
    }

    /**
     * Scan Cooldown
     *
     * @param string $shipSymbol
     *
     * @return Models\MyShipsScanResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyShipsShipSymbolScan(string $shipSymbol): Models\MyShipsScanResponse1
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}/scan';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol' => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsScanResponse1');
    }

    /**
     * Retrieve the details of your ship.
     *
     * @param string $shipSymbol
     *
     * @return Models\MyShipsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyShipsShipSymbol(string $shipSymbol): Models\MyShipsResponse
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships/{shipSymbol}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'shipSymbol' => $shipSymbol,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsResponse');
    }

    /**
     * Retrieve all of your ships.
     *
     * @return Models\MyShipsResponse1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getMyShips(): Models\MyShipsResponse1
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/my/ships';

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MyShipsResponse1');
    }
}
