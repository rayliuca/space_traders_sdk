<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Models;

use stdClass;

class Contract implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $faction;

    /**
     * @var string
     */
    private $type;

    /**
     * @var Terms
     */
    private $terms;

    /**
     * @var bool
     */
    private $accepted;

    /**
     * @var bool
     */
    private $fulfilled;

    /**
     * @var string
     */
    private $expiresAt;

    /**
     * @param string $id
     * @param string $faction
     * @param string $type
     * @param Terms $terms
     * @param bool $accepted
     * @param bool $fulfilled
     * @param string $expiresAt
     */
    public function __construct(
        string $id,
        string $faction,
        string $type,
        Terms $terms,
        bool $accepted,
        bool $fulfilled,
        string $expiresAt
    ) {
        $this->id = $id;
        $this->faction = $faction;
        $this->type = $type;
        $this->terms = $terms;
        $this->accepted = $accepted;
        $this->fulfilled = $fulfilled;
        $this->expiresAt = $expiresAt;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Faction.
     */
    public function getFaction(): string
    {
        return $this->faction;
    }

    /**
     * Sets Faction.
     *
     * @required
     * @maps faction
     */
    public function setFaction(string $faction): void
    {
        $this->faction = $faction;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Terms.
     */
    public function getTerms(): Terms
    {
        return $this->terms;
    }

    /**
     * Sets Terms.
     *
     * @required
     * @maps terms
     */
    public function setTerms(Terms $terms): void
    {
        $this->terms = $terms;
    }

    /**
     * Returns Accepted.
     */
    public function getAccepted(): bool
    {
        return $this->accepted;
    }

    /**
     * Sets Accepted.
     *
     * @required
     * @maps accepted
     */
    public function setAccepted(bool $accepted): void
    {
        $this->accepted = $accepted;
    }

    /**
     * Returns Fulfilled.
     */
    public function getFulfilled(): bool
    {
        return $this->fulfilled;
    }

    /**
     * Sets Fulfilled.
     *
     * @required
     * @maps fulfilled
     */
    public function setFulfilled(bool $fulfilled): void
    {
        $this->fulfilled = $fulfilled;
    }

    /**
     * Returns Expires At.
     */
    public function getExpiresAt(): string
    {
        return $this->expiresAt;
    }

    /**
     * Sets Expires At.
     *
     * @required
     * @maps expiresAt
     */
    public function setExpiresAt(string $expiresAt): void
    {
        $this->expiresAt = $expiresAt;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']        = $this->id;
        $json['faction']   = $this->faction;
        $json['type']      = $this->type;
        $json['terms']     = $this->terms;
        $json['accepted']  = $this->accepted;
        $json['fulfilled'] = $this->fulfilled;
        $json['expiresAt'] = $this->expiresAt;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
