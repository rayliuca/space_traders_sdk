<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Models;

use stdClass;

class ScannedShip implements \JsonSerializable
{
    /**
     * @var string
     */
    private $symbol;

    /**
     * @var Registration
     */
    private $registration;

    /**
     * @var string
     */
    private $frameSymbol;

    /**
     * @var string
     */
    private $reactorSymbol;

    /**
     * @var string
     */
    private $engineSymbol;

    /**
     * @var string
     */
    private $expiration;

    /**
     * @param string $symbol
     * @param Registration $registration
     * @param string $frameSymbol
     * @param string $reactorSymbol
     * @param string $engineSymbol
     * @param string $expiration
     */
    public function __construct(
        string $symbol,
        Registration $registration,
        string $frameSymbol,
        string $reactorSymbol,
        string $engineSymbol,
        string $expiration
    ) {
        $this->symbol = $symbol;
        $this->registration = $registration;
        $this->frameSymbol = $frameSymbol;
        $this->reactorSymbol = $reactorSymbol;
        $this->engineSymbol = $engineSymbol;
        $this->expiration = $expiration;
    }

    /**
     * Returns Symbol.
     */
    public function getSymbol(): string
    {
        return $this->symbol;
    }

    /**
     * Sets Symbol.
     *
     * @required
     * @maps symbol
     */
    public function setSymbol(string $symbol): void
    {
        $this->symbol = $symbol;
    }

    /**
     * Returns Registration.
     */
    public function getRegistration(): Registration
    {
        return $this->registration;
    }

    /**
     * Sets Registration.
     *
     * @required
     * @maps registration
     */
    public function setRegistration(Registration $registration): void
    {
        $this->registration = $registration;
    }

    /**
     * Returns Frame Symbol.
     */
    public function getFrameSymbol(): string
    {
        return $this->frameSymbol;
    }

    /**
     * Sets Frame Symbol.
     *
     * @required
     * @maps frameSymbol
     */
    public function setFrameSymbol(string $frameSymbol): void
    {
        $this->frameSymbol = $frameSymbol;
    }

    /**
     * Returns Reactor Symbol.
     */
    public function getReactorSymbol(): string
    {
        return $this->reactorSymbol;
    }

    /**
     * Sets Reactor Symbol.
     *
     * @required
     * @maps reactorSymbol
     */
    public function setReactorSymbol(string $reactorSymbol): void
    {
        $this->reactorSymbol = $reactorSymbol;
    }

    /**
     * Returns Engine Symbol.
     */
    public function getEngineSymbol(): string
    {
        return $this->engineSymbol;
    }

    /**
     * Sets Engine Symbol.
     *
     * @required
     * @maps engineSymbol
     */
    public function setEngineSymbol(string $engineSymbol): void
    {
        $this->engineSymbol = $engineSymbol;
    }

    /**
     * Returns Expiration.
     */
    public function getExpiration(): string
    {
        return $this->expiration;
    }

    /**
     * Sets Expiration.
     *
     * @required
     * @maps expiration
     */
    public function setExpiration(string $expiration): void
    {
        $this->expiration = $expiration;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['symbol']        = $this->symbol;
        $json['registration']  = $this->registration;
        $json['frameSymbol']   = $this->frameSymbol;
        $json['reactorSymbol'] = $this->reactorSymbol;
        $json['engineSymbol']  = $this->engineSymbol;
        $json['expiration']    = $this->expiration;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
