<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Models;

use stdClass;

class Meta implements \JsonSerializable
{
    /**
     * @var int
     */
    private $total;

    /**
     * @var int
     */
    private $page;

    /**
     * @var int
     */
    private $limit;

    /**
     * @param int $total
     * @param int $page
     * @param int $limit
     */
    public function __construct(int $total, int $page, int $limit)
    {
        $this->total = $total;
        $this->page = $page;
        $this->limit = $limit;
    }

    /**
     * Returns Total.
     */
    public function getTotal(): int
    {
        return $this->total;
    }

    /**
     * Sets Total.
     *
     * @required
     * @maps total
     */
    public function setTotal(int $total): void
    {
        $this->total = $total;
    }

    /**
     * Returns Page.
     */
    public function getPage(): int
    {
        return $this->page;
    }

    /**
     * Sets Page.
     *
     * @required
     * @maps page
     */
    public function setPage(int $page): void
    {
        $this->page = $page;
    }

    /**
     * Returns Limit.
     */
    public function getLimit(): int
    {
        return $this->limit;
    }

    /**
     * Sets Limit.
     *
     * @required
     * @maps limit
     */
    public function setLimit(int $limit): void
    {
        $this->limit = $limit;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['total'] = $this->total;
        $json['page']  = $this->page;
        $json['limit'] = $this->limit;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
