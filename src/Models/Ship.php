<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Models;

use stdClass;

class Ship implements \JsonSerializable
{
    /**
     * @var string
     */
    private $symbol;

    /**
     * @var string
     */
    private $frame;

    /**
     * @var string
     */
    private $reactor;

    /**
     * @var string
     */
    private $engine;

    /**
     * @var string[]
     */
    private $modules;

    /**
     * @var string[]
     */
    private $mounts;

    /**
     * @var Registration1
     */
    private $registration;

    /**
     * @var Integrity
     */
    private $integrity;

    /**
     * @var Stats|null
     */
    private $stats;

    /**
     * @var string
     */
    private $status;

    /**
     * @var string
     */
    private $location;

    /**
     * @var Cargo[]
     */
    private $cargo;

    /**
     * @var int
     */
    private $fuel;

    /**
     * @param string $symbol
     * @param string $frame
     * @param string $reactor
     * @param string $engine
     * @param string[] $modules
     * @param string[] $mounts
     * @param Registration1 $registration
     * @param Integrity $integrity
     * @param string $status
     * @param string $location
     * @param Cargo[] $cargo
     * @param int $fuel
     */
    public function __construct(
        string $symbol,
        string $frame,
        string $reactor,
        string $engine,
        array $modules,
        array $mounts,
        Registration1 $registration,
        Integrity $integrity,
        string $status,
        string $location,
        array $cargo,
        int $fuel
    ) {
        $this->symbol = $symbol;
        $this->frame = $frame;
        $this->reactor = $reactor;
        $this->engine = $engine;
        $this->modules = $modules;
        $this->mounts = $mounts;
        $this->registration = $registration;
        $this->integrity = $integrity;
        $this->status = $status;
        $this->location = $location;
        $this->cargo = $cargo;
        $this->fuel = $fuel;
    }

    /**
     * Returns Symbol.
     */
    public function getSymbol(): string
    {
        return $this->symbol;
    }

    /**
     * Sets Symbol.
     *
     * @required
     * @maps symbol
     */
    public function setSymbol(string $symbol): void
    {
        $this->symbol = $symbol;
    }

    /**
     * Returns Frame.
     */
    public function getFrame(): string
    {
        return $this->frame;
    }

    /**
     * Sets Frame.
     *
     * @required
     * @maps frame
     */
    public function setFrame(string $frame): void
    {
        $this->frame = $frame;
    }

    /**
     * Returns Reactor.
     */
    public function getReactor(): string
    {
        return $this->reactor;
    }

    /**
     * Sets Reactor.
     *
     * @required
     * @maps reactor
     */
    public function setReactor(string $reactor): void
    {
        $this->reactor = $reactor;
    }

    /**
     * Returns Engine.
     */
    public function getEngine(): string
    {
        return $this->engine;
    }

    /**
     * Sets Engine.
     *
     * @required
     * @maps engine
     */
    public function setEngine(string $engine): void
    {
        $this->engine = $engine;
    }

    /**
     * Returns Modules.
     *
     * @return string[]
     */
    public function getModules(): array
    {
        return $this->modules;
    }

    /**
     * Sets Modules.
     *
     * @required
     * @maps modules
     *
     * @param string[] $modules
     */
    public function setModules(array $modules): void
    {
        $this->modules = $modules;
    }

    /**
     * Returns Mounts.
     *
     * @return string[]
     */
    public function getMounts(): array
    {
        return $this->mounts;
    }

    /**
     * Sets Mounts.
     *
     * @required
     * @maps mounts
     *
     * @param string[] $mounts
     */
    public function setMounts(array $mounts): void
    {
        $this->mounts = $mounts;
    }

    /**
     * Returns Registration.
     */
    public function getRegistration(): Registration1
    {
        return $this->registration;
    }

    /**
     * Sets Registration.
     *
     * @required
     * @maps registration
     */
    public function setRegistration(Registration1 $registration): void
    {
        $this->registration = $registration;
    }

    /**
     * Returns Integrity.
     */
    public function getIntegrity(): Integrity
    {
        return $this->integrity;
    }

    /**
     * Sets Integrity.
     *
     * @required
     * @maps integrity
     */
    public function setIntegrity(Integrity $integrity): void
    {
        $this->integrity = $integrity;
    }

    /**
     * Returns Stats.
     */
    public function getStats(): ?Stats
    {
        return $this->stats;
    }

    /**
     * Sets Stats.
     *
     * @maps stats
     */
    public function setStats(?Stats $stats): void
    {
        $this->stats = $stats;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Location.
     */
    public function getLocation(): string
    {
        return $this->location;
    }

    /**
     * Sets Location.
     *
     * @required
     * @maps location
     */
    public function setLocation(string $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns Cargo.
     *
     * @return Cargo[]
     */
    public function getCargo(): array
    {
        return $this->cargo;
    }

    /**
     * Sets Cargo.
     *
     * @required
     * @maps cargo
     *
     * @param Cargo[] $cargo
     */
    public function setCargo(array $cargo): void
    {
        $this->cargo = $cargo;
    }

    /**
     * Returns Fuel.
     */
    public function getFuel(): int
    {
        return $this->fuel;
    }

    /**
     * Sets Fuel.
     *
     * @required
     * @maps fuel
     */
    public function setFuel(int $fuel): void
    {
        $this->fuel = $fuel;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['symbol']       = $this->symbol;
        $json['frame']        = $this->frame;
        $json['reactor']      = $this->reactor;
        $json['engine']       = $this->engine;
        $json['modules']      = $this->modules;
        $json['mounts']       = $this->mounts;
        $json['registration'] = $this->registration;
        $json['integrity']    = $this->integrity;
        if (isset($this->stats)) {
            $json['stats']    = $this->stats;
        }
        $json['status']       = $this->status;
        $json['location']     = $this->location;
        $json['cargo']        = $this->cargo;
        $json['fuel']         = $this->fuel;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
