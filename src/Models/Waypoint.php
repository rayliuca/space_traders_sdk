<?php

declare(strict_types=1);

/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SpaceTradersAPILib\Models;

use stdClass;

class Waypoint implements \JsonSerializable
{
    /**
     * @var string
     */
    private $system;

    /**
     * @var string
     */
    private $symbol;

    /**
     * @var string
     */
    private $type;

    /**
     * @var int
     */
    private $x;

    /**
     * @var int
     */
    private $y;

    /**
     * @var string[]
     */
    private $orbitals;

    /**
     * @var string
     */
    private $faction;

    /**
     * @var string[]
     */
    private $features;

    /**
     * @var string[]
     */
    private $traits;

    /**
     * @var bool
     */
    private $charted;

    /**
     * @var array
     */
    private $chartedBy = [];

    /**
     * @param string $system
     * @param string $symbol
     * @param string $type
     * @param int $x
     * @param int $y
     * @param string[] $orbitals
     * @param string $faction
     * @param string[] $features
     * @param string[] $traits
     * @param bool $charted
     */
    public function __construct(
        string $system,
        string $symbol,
        string $type,
        int $x,
        int $y,
        array $orbitals,
        string $faction,
        array $features,
        array $traits,
        bool $charted
    ) {
        $this->system = $system;
        $this->symbol = $symbol;
        $this->type = $type;
        $this->x = $x;
        $this->y = $y;
        $this->orbitals = $orbitals;
        $this->faction = $faction;
        $this->features = $features;
        $this->traits = $traits;
        $this->charted = $charted;
    }

    /**
     * Returns System.
     */
    public function getSystem(): string
    {
        return $this->system;
    }

    /**
     * Sets System.
     *
     * @required
     * @maps system
     */
    public function setSystem(string $system): void
    {
        $this->system = $system;
    }

    /**
     * Returns Symbol.
     */
    public function getSymbol(): string
    {
        return $this->symbol;
    }

    /**
     * Sets Symbol.
     *
     * @required
     * @maps symbol
     */
    public function setSymbol(string $symbol): void
    {
        $this->symbol = $symbol;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns X.
     */
    public function getX(): int
    {
        return $this->x;
    }

    /**
     * Sets X.
     *
     * @required
     * @maps x
     */
    public function setX(int $x): void
    {
        $this->x = $x;
    }

    /**
     * Returns Y.
     */
    public function getY(): int
    {
        return $this->y;
    }

    /**
     * Sets Y.
     *
     * @required
     * @maps y
     */
    public function setY(int $y): void
    {
        $this->y = $y;
    }

    /**
     * Returns Orbitals.
     *
     * @return string[]
     */
    public function getOrbitals(): array
    {
        return $this->orbitals;
    }

    /**
     * Sets Orbitals.
     *
     * @required
     * @maps orbitals
     *
     * @param string[] $orbitals
     */
    public function setOrbitals(array $orbitals): void
    {
        $this->orbitals = $orbitals;
    }

    /**
     * Returns Faction.
     */
    public function getFaction(): string
    {
        return $this->faction;
    }

    /**
     * Sets Faction.
     *
     * @required
     * @maps faction
     */
    public function setFaction(string $faction): void
    {
        $this->faction = $faction;
    }

    /**
     * Returns Features.
     *
     * @return string[]
     */
    public function getFeatures(): array
    {
        return $this->features;
    }

    /**
     * Sets Features.
     *
     * @required
     * @maps features
     *
     * @param string[] $features
     */
    public function setFeatures(array $features): void
    {
        $this->features = $features;
    }

    /**
     * Returns Traits.
     *
     * @return string[]
     */
    public function getTraits(): array
    {
        return $this->traits;
    }

    /**
     * Sets Traits.
     *
     * @required
     * @maps traits
     *
     * @param string[] $traits
     */
    public function setTraits(array $traits): void
    {
        $this->traits = $traits;
    }

    /**
     * Returns Charted.
     */
    public function getCharted(): bool
    {
        return $this->charted;
    }

    /**
     * Sets Charted.
     *
     * @required
     * @maps charted
     */
    public function setCharted(bool $charted): void
    {
        $this->charted = $charted;
    }

    /**
     * Returns Charted By.
     */
    public function getChartedBy(): ?string
    {
        if (count($this->chartedBy) == 0) {
            return null;
        }
        return $this->chartedBy['value'];
    }

    /**
     * Sets Charted By.
     *
     * @maps chartedBy
     */
    public function setChartedBy(?string $chartedBy): void
    {
        $this->chartedBy['value'] = $chartedBy;
    }

    /**
     * Unsets Charted By.
     */
    public function unsetChartedBy(): void
    {
        $this->chartedBy = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['system']        = $this->system;
        $json['symbol']        = $this->symbol;
        $json['type']          = $this->type;
        $json['x']             = $this->x;
        $json['y']             = $this->y;
        $json['orbitals']      = $this->orbitals;
        $json['faction']       = $this->faction;
        $json['features']      = $this->features;
        $json['traits']        = $this->traits;
        $json['charted']       = $this->charted;
        if (!empty($this->chartedBy)) {
            $json['chartedBy'] = $this->chartedBy['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
