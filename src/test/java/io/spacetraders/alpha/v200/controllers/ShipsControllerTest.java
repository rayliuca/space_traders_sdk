/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import io.spacetraders.alpha.v200.SpaceTradersAPIClient;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.models.MyShipsResponse1;
import io.spacetraders.alpha.v200.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ShipsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SpaceTradersAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ShipsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getShipsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Retrieve all of your ships.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetMyShips() throws Exception {

        // Set callback and perform API call
        MyShipsResponse1 result = null;
        try {
            result = controller.getMyShips();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":[{\"symbol\":\"55B261-1\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]},{\"symbol\":\"55B261-2\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]},{\"symbol\":\"55B261-3\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]},{\"symbol\":\"55B261-4\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]},{\"symbol\":\"55B261-5\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]},{\"symbol\":\"55B261-6\",\"crew\":null,\"officers\":null,\"fuel\":100,"
                + "\"frame\":\"FRAME_DRONE\",\"reactor\":\"REACTOR_SOLAR_I\",\"engine\":\"ENGINE_SO"
                + "LAR_PROPULSION\",\"modules\":[\"MODULE_CARGO_HOLD\"],\"mounts\":[\"MOUNT_MINING_"
                + "LASER_I\"],\"registration\":{\"factionSymbol\":\"COMMERCE_REPUBLIC\",\"agentSymb"
                + "ol\":\"55B261\",\"fee\":100,\"role\":\"EXCAVATOR\"},\"integrity\":{\"frame\":1,"
                + "\"reactor\":1,\"engine\":1},\"status\":\"DOCKED\",\"location\":\"X1-OE-PM\",\"ca"
                + "rgo\":[]}],\"meta\":{\"total\":6,\"page\":1,\"limit\":20}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
