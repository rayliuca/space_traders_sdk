/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import io.spacetraders.alpha.v200.SpaceTradersAPIClient;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.models.SystemsResponse;
import io.spacetraders.alpha.v200.models.SystemsResponse1;
import io.spacetraders.alpha.v200.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SystemsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SpaceTradersAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SystemsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSystemsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Return a list of all systems.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetSystems() throws Exception {

        // Set callback and perform API call
        SystemsResponse result = null;
        try {
            result = controller.getSystems();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":[{\"symbol\":\"X1-OE\",\"sector\":\"X1\",\"type\":\"RED_STAR\",\"x\":0,"
                + "\"y\":0,\"waypoints\":[\"X1-OE-PM\",\"X1-OE-PM01\",\"X1-OE-A005\",\"X1-OE-25X\"]"
                + ",\"factions\":[\"COMMERCE_REPUBLIC\",\"MINERS_COLLECTIVE\",\"SPACERS_GUILD\"],"
                + "\"charted\":true,\"chartedBy\":null}],\"meta\":{\"total\":0,\"page\":0,\"limit"
                + "\":0}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * View System.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetSystemsSystemSymbol() throws Exception {
        // Parameters for the API call
        String systemSymbol = 
                "X1-OE";

        // Set callback and perform API call
        SystemsResponse1 result = null;
        try {
            result = controller.getSystemsSystemSymbol(systemSymbol);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":{\"symbol\":\"X1-ZZ\",\"sector\":\"X1\",\"type\":\"BLUE_STAR\",\"x\":-2,"
                + "\"y\":9,\"waypoints\":[],\"factions\":[],\"charted\":false,\"chartedBy\":null}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
