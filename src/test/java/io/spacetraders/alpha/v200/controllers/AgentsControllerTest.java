/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.SpaceTradersAPIClient;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.models.AgentsRequest;
import io.spacetraders.alpha.v200.models.AgentsResponse;
import io.spacetraders.alpha.v200.models.MyAgentResponse;
import io.spacetraders.alpha.v200.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class AgentsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SpaceTradersAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static AgentsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getAgentsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your
     * starting faction if you don't know any other factions to choose from. The agent symbol is a
     * 4-8 character string that will represent your agent. This symbol will prefix the symbol of
     * every ship you own. Agent symbols will be cast to all uppercase characters. A new agent will
     * be granted an authorization token, a contract with their starting faction, a command ship
     * with a jump drive, and one hundred thousand credits. &gt; #### Keep your token safe and secure &gt;
     * &gt; Save your token during the alpha phase. There is no way to regenerate this token without
     * starting a new agent. In the future you will be able to generate and manage your tokens from
     * the SpaceTraders website. You can accept your contract using the
     * `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to
     * a nearby asteroid field waypoint, and execute the `/my/ships/{shipSymbol}/accept` endpoint to
     * mine various types of ores and minerals. Return to the contract destination and execute the
     * `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract. When your
     * contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestPostAgents() throws Exception {
        // Parameters for the API call
        AgentsRequest body = null;

        // Set callback and perform API call
        AgentsResponse result = null;
        try {
            result = controller.postAgents(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":{\"token\":\"string\",\"agent\":{\"accountId\":\"cl0hok34m0003ks0jjql5q8"
                + "f2\",\"symbol\":\"EMBER\",\"headquarters\":\"X1-OE-PM\",\"credits\":0},\"faction"
                + "\":{\"symbol\":\"COMMERCE_REPUBLIC\",\"name\":\"Commerce Repubic\",\"description"
                + "\":\"The Commerce Republic takes capital from top tier worlds and invests it int"
                + "o new systems with high potential for growth.\",\"headquarters\":\"X1-OE-PM\","
                + "\"traits\":[\"BUREAUCRATIC\",\"CAPITALISTIC\",\"GUILD\",\"ESTABLISHED\"]},\"cont"
                + "ract\":{\"id\":\"cl0hok38t0014ks0jnoy8o5vh\",\"faction\":\"COMMERCE_REPUBLIC\","
                + "\"type\":\"PROCUREMENT\",\"terms\":{\"deadline\":\"2022-03-11T05:16:59.113Z\","
                + "\"payment\":{\"onAccepted\":20000,\"onFulfilled\":100000},\"deliver\":[{\"tradeS"
                + "ymbol\":\"IRON_ORE\",\"destination\":\"X1-OE-PM\",\"units\":10000,\"fulfilled\":"
                + "0}]},\"accepted\":false,\"fulfilled\":false,\"expiresAt\":\"2022-03-09T05:16:59."
                + "112Z\"},\"ship\":{\"symbol\":\"string\",\"frame\":\"string\",\"reactor\":\"strin"
                + "g\",\"engine\":\"string\",\"fuel\":0,\"modules\":[\"string\"],\"mounts\":[\"stri"
                + "ng\"],\"registration\":{\"factionSymbol\":\"string\",\"agentSymbol\":\"string\","
                + "\"fee\":0,\"role\":\"string\"},\"integrity\":{\"frame\":0,\"reactor\":0,\"engine"
                + "\":0},\"status\":\"string\",\"location\":\"string\",\"cargo\":[{\"tradeSymbol\":"
                + "\"string\",\"units\":0}]}}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Fetch your agent's details.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetMyAgent() throws Exception {

        // Set callback and perform API call
        MyAgentResponse result = null;
        try {
            result = controller.getMyAgent();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":{\"accountId\":\"cl0hok34m0003ks0jjql5q8f2\",\"symbol\":\"EMBER\",\"head"
                + "quarters\":\"X1-OE-PM\",\"credits\":0}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
