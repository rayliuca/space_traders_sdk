/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import io.spacetraders.alpha.v200.SpaceTradersAPIClient;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.models.MyContractsResponse;
import io.spacetraders.alpha.v200.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ContractsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SpaceTradersAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ContractsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getContractsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * List all of your contracts.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetMyContracts() throws Exception {

        // Set callback and perform API call
        MyContractsResponse result = null;
        try {
            result = controller.getMyContracts();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":[{\"id\":\"cl0hok38t0014ks0jnoy8o5vh\",\"faction\":\"COMMERCE_REPUBLIC"
                + "\",\"type\":\"PROCUREMENT\",\"terms\":{\"deadline\":\"2022-03-11T05:16:59.113Z"
                + "\",\"payment\":{\"onAccepted\":20000,\"onFulfilled\":100000},\"deliver\":[{\"tra"
                + "deSymbol\":\"IRON_ORE\",\"destination\":\"X1-OE-PM\",\"units\":10000,\"fulfilled"
                + "\":0}]},\"accepted\":false,\"fulfilled\":false,\"expiresAt\":\"2022-03-09T05:16:"
                + "59.112Z\"}],\"meta\":{\"total\":10,\"page\":1,\"limit\":10}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
