/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Faction type.
 */
public class Faction {
    private String symbol;
    private String name;
    private String description;
    private String headquarters;
    private List<String> traits;

    /**
     * Default constructor.
     */
    public Faction() {
    }

    /**
     * Initialization constructor.
     * @param  symbol  String value for symbol.
     * @param  name  String value for name.
     * @param  description  String value for description.
     * @param  headquarters  String value for headquarters.
     * @param  traits  List of String value for traits.
     */
    public Faction(
            String symbol,
            String name,
            String description,
            String headquarters,
            List<String> traits) {
        this.symbol = symbol;
        this.name = name;
        this.description = description;
        this.headquarters = headquarters;
        this.traits = traits;
    }

    /**
     * Getter for Symbol.
     * @return Returns the String
     */
    @JsonGetter("symbol")
    public String getSymbol() {
        return symbol;
    }

    /**
     * Setter for Symbol.
     * @param symbol Value for String
     */
    @JsonSetter("symbol")
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Description.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Headquarters.
     * @return Returns the String
     */
    @JsonGetter("headquarters")
    public String getHeadquarters() {
        return headquarters;
    }

    /**
     * Setter for Headquarters.
     * @param headquarters Value for String
     */
    @JsonSetter("headquarters")
    public void setHeadquarters(String headquarters) {
        this.headquarters = headquarters;
    }

    /**
     * Getter for Traits.
     * @return Returns the List of String
     */
    @JsonGetter("traits")
    public List<String> getTraits() {
        return traits;
    }

    /**
     * Setter for Traits.
     * @param traits Value for List of String
     */
    @JsonSetter("traits")
    public void setTraits(List<String> traits) {
        this.traits = traits;
    }

    /**
     * Converts this Faction into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Faction [" + "symbol=" + symbol + ", name=" + name + ", description=" + description
                + ", headquarters=" + headquarters + ", traits=" + traits + "]";
    }

    /**
     * Builds a new {@link Faction.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Faction.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(symbol, name, description, headquarters, traits);
        return builder;
    }

    /**
     * Class to build instances of {@link Faction}.
     */
    public static class Builder {
        private String symbol;
        private String name;
        private String description;
        private String headquarters;
        private List<String> traits;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  symbol  String value for symbol.
         * @param  name  String value for name.
         * @param  description  String value for description.
         * @param  headquarters  String value for headquarters.
         * @param  traits  List of String value for traits.
         */
        public Builder(String symbol, String name, String description, String headquarters,
                List<String> traits) {
            this.symbol = symbol;
            this.name = name;
            this.description = description;
            this.headquarters = headquarters;
            this.traits = traits;
        }

        /**
         * Setter for symbol.
         * @param  symbol  String value for symbol.
         * @return Builder
         */
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for headquarters.
         * @param  headquarters  String value for headquarters.
         * @return Builder
         */
        public Builder headquarters(String headquarters) {
            this.headquarters = headquarters;
            return this;
        }

        /**
         * Setter for traits.
         * @param  traits  List of String value for traits.
         * @return Builder
         */
        public Builder traits(List<String> traits) {
            this.traits = traits;
            return this;
        }

        /**
         * Builds a new {@link Faction} object using the set fields.
         * @return {@link Faction}
         */
        public Faction build() {
            return new Faction(symbol, name, description, headquarters, traits);
        }
    }
}
