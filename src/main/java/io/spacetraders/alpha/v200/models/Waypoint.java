/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.spacetraders.alpha.v200.internal.OptionalNullable;
import java.util.List;

/**
 * This is a model class for Waypoint type.
 */
public class Waypoint {
    private String system;
    private String symbol;
    private String type;
    private int x;
    private int y;
    private List<String> orbitals;
    private String faction;
    private List<String> features;
    private List<String> traits;
    private boolean charted;
    private OptionalNullable<String> chartedBy;

    /**
     * Default constructor.
     */
    public Waypoint() {
    }

    /**
     * Initialization constructor.
     * @param  system  String value for system.
     * @param  symbol  String value for symbol.
     * @param  type  String value for type.
     * @param  x  int value for x.
     * @param  y  int value for y.
     * @param  orbitals  List of String value for orbitals.
     * @param  faction  String value for faction.
     * @param  features  List of String value for features.
     * @param  traits  List of String value for traits.
     * @param  charted  boolean value for charted.
     * @param  chartedBy  String value for chartedBy.
     */
    public Waypoint(
            String system,
            String symbol,
            String type,
            int x,
            int y,
            List<String> orbitals,
            String faction,
            List<String> features,
            List<String> traits,
            boolean charted,
            String chartedBy) {
        this.system = system;
        this.symbol = symbol;
        this.type = type;
        this.x = x;
        this.y = y;
        this.orbitals = orbitals;
        this.faction = faction;
        this.features = features;
        this.traits = traits;
        this.charted = charted;
        this.chartedBy = OptionalNullable.of(chartedBy);
    }

    /**
     * Internal initialization constructor.
     */
    protected Waypoint(String system, String symbol, String type, int x, int y,
            List<String> orbitals, String faction, List<String> features, List<String> traits,
            boolean charted, OptionalNullable<String> chartedBy) {
        this.system = system;
        this.symbol = symbol;
        this.type = type;
        this.x = x;
        this.y = y;
        this.orbitals = orbitals;
        this.faction = faction;
        this.features = features;
        this.traits = traits;
        this.charted = charted;
        this.chartedBy = chartedBy;
    }

    /**
     * Getter for System.
     * @return Returns the String
     */
    @JsonGetter("system")
    public String getSystem() {
        return system;
    }

    /**
     * Setter for System.
     * @param system Value for String
     */
    @JsonSetter("system")
    public void setSystem(String system) {
        this.system = system;
    }

    /**
     * Getter for Symbol.
     * @return Returns the String
     */
    @JsonGetter("symbol")
    public String getSymbol() {
        return symbol;
    }

    /**
     * Setter for Symbol.
     * @param symbol Value for String
     */
    @JsonSetter("symbol")
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for X.
     * @return Returns the int
     */
    @JsonGetter("x")
    public int getX() {
        return x;
    }

    /**
     * Setter for X.
     * @param x Value for int
     */
    @JsonSetter("x")
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Getter for Y.
     * @return Returns the int
     */
    @JsonGetter("y")
    public int getY() {
        return y;
    }

    /**
     * Setter for Y.
     * @param y Value for int
     */
    @JsonSetter("y")
    public void setY(int y) {
        this.y = y;
    }

    /**
     * Getter for Orbitals.
     * @return Returns the List of String
     */
    @JsonGetter("orbitals")
    public List<String> getOrbitals() {
        return orbitals;
    }

    /**
     * Setter for Orbitals.
     * @param orbitals Value for List of String
     */
    @JsonSetter("orbitals")
    public void setOrbitals(List<String> orbitals) {
        this.orbitals = orbitals;
    }

    /**
     * Getter for Faction.
     * @return Returns the String
     */
    @JsonGetter("faction")
    public String getFaction() {
        return faction;
    }

    /**
     * Setter for Faction.
     * @param faction Value for String
     */
    @JsonSetter("faction")
    public void setFaction(String faction) {
        this.faction = faction;
    }

    /**
     * Getter for Features.
     * @return Returns the List of String
     */
    @JsonGetter("features")
    public List<String> getFeatures() {
        return features;
    }

    /**
     * Setter for Features.
     * @param features Value for List of String
     */
    @JsonSetter("features")
    public void setFeatures(List<String> features) {
        this.features = features;
    }

    /**
     * Getter for Traits.
     * @return Returns the List of String
     */
    @JsonGetter("traits")
    public List<String> getTraits() {
        return traits;
    }

    /**
     * Setter for Traits.
     * @param traits Value for List of String
     */
    @JsonSetter("traits")
    public void setTraits(List<String> traits) {
        this.traits = traits;
    }

    /**
     * Getter for Charted.
     * @return Returns the boolean
     */
    @JsonGetter("charted")
    public boolean getCharted() {
        return charted;
    }

    /**
     * Setter for Charted.
     * @param charted Value for boolean
     */
    @JsonSetter("charted")
    public void setCharted(boolean charted) {
        this.charted = charted;
    }

    /**
     * Internal Getter for ChartedBy.
     * @return Returns the Internal String
     */
    @JsonGetter("chartedBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetChartedBy() {
        return this.chartedBy;
    }

    /**
     * Getter for ChartedBy.
     * @return Returns the String
     */
    public String getChartedBy() {
        return OptionalNullable.getFrom(chartedBy);
    }

    /**
     * Setter for ChartedBy.
     * @param chartedBy Value for String
     */
    @JsonSetter("chartedBy")
    public void setChartedBy(String chartedBy) {
        this.chartedBy = OptionalNullable.of(chartedBy);
    }

    /**
     * UnSetter for ChartedBy.
     */
    public void unsetChartedBy() {
        chartedBy = null;
    }

    /**
     * Converts this Waypoint into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Waypoint [" + "system=" + system + ", symbol=" + symbol + ", type=" + type + ", x="
                + x + ", y=" + y + ", orbitals=" + orbitals + ", faction=" + faction + ", features="
                + features + ", traits=" + traits + ", charted=" + charted + ", chartedBy="
                + chartedBy + "]";
    }

    /**
     * Builds a new {@link Waypoint.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Waypoint.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(system, symbol, type, x, y, orbitals, faction, features,
                traits, charted);
        builder.chartedBy = internalGetChartedBy();
        return builder;
    }

    /**
     * Class to build instances of {@link Waypoint}.
     */
    public static class Builder {
        private String system;
        private String symbol;
        private String type;
        private int x;
        private int y;
        private List<String> orbitals;
        private String faction;
        private List<String> features;
        private List<String> traits;
        private boolean charted;
        private OptionalNullable<String> chartedBy;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  system  String value for system.
         * @param  symbol  String value for symbol.
         * @param  type  String value for type.
         * @param  x  int value for x.
         * @param  y  int value for y.
         * @param  orbitals  List of String value for orbitals.
         * @param  faction  String value for faction.
         * @param  features  List of String value for features.
         * @param  traits  List of String value for traits.
         * @param  charted  boolean value for charted.
         */
        public Builder(String system, String symbol, String type, int x, int y,
                List<String> orbitals, String faction, List<String> features, List<String> traits,
                boolean charted) {
            this.system = system;
            this.symbol = symbol;
            this.type = type;
            this.x = x;
            this.y = y;
            this.orbitals = orbitals;
            this.faction = faction;
            this.features = features;
            this.traits = traits;
            this.charted = charted;
        }

        /**
         * Setter for system.
         * @param  system  String value for system.
         * @return Builder
         */
        public Builder system(String system) {
            this.system = system;
            return this;
        }

        /**
         * Setter for symbol.
         * @param  symbol  String value for symbol.
         * @return Builder
         */
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for x.
         * @param  x  int value for x.
         * @return Builder
         */
        public Builder x(int x) {
            this.x = x;
            return this;
        }

        /**
         * Setter for y.
         * @param  y  int value for y.
         * @return Builder
         */
        public Builder y(int y) {
            this.y = y;
            return this;
        }

        /**
         * Setter for orbitals.
         * @param  orbitals  List of String value for orbitals.
         * @return Builder
         */
        public Builder orbitals(List<String> orbitals) {
            this.orbitals = orbitals;
            return this;
        }

        /**
         * Setter for faction.
         * @param  faction  String value for faction.
         * @return Builder
         */
        public Builder faction(String faction) {
            this.faction = faction;
            return this;
        }

        /**
         * Setter for features.
         * @param  features  List of String value for features.
         * @return Builder
         */
        public Builder features(List<String> features) {
            this.features = features;
            return this;
        }

        /**
         * Setter for traits.
         * @param  traits  List of String value for traits.
         * @return Builder
         */
        public Builder traits(List<String> traits) {
            this.traits = traits;
            return this;
        }

        /**
         * Setter for charted.
         * @param  charted  boolean value for charted.
         * @return Builder
         */
        public Builder charted(boolean charted) {
            this.charted = charted;
            return this;
        }

        /**
         * Setter for chartedBy.
         * @param  chartedBy  String value for chartedBy.
         * @return Builder
         */
        public Builder chartedBy(String chartedBy) {
            this.chartedBy = OptionalNullable.of(chartedBy);
            return this;
        }

        /**
         * UnSetter for chartedBy.
         * @return Builder
         */
        public Builder unsetChartedBy() {
            chartedBy = null;
            return this;
        }

        /**
         * Builds a new {@link Waypoint} object using the set fields.
         * @return {@link Waypoint}
         */
        public Waypoint build() {
            return new Waypoint(system, symbol, type, x, y, orbitals, faction, features, traits,
                    charted, chartedBy);
        }
    }
}
