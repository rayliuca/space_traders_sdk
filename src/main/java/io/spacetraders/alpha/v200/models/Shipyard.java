/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Shipyard type.
 */
public class Shipyard {
    private String symbol;
    private String faction;

    /**
     * Default constructor.
     */
    public Shipyard() {
    }

    /**
     * Initialization constructor.
     * @param  symbol  String value for symbol.
     * @param  faction  String value for faction.
     */
    public Shipyard(
            String symbol,
            String faction) {
        this.symbol = symbol;
        this.faction = faction;
    }

    /**
     * Getter for Symbol.
     * @return Returns the String
     */
    @JsonGetter("symbol")
    public String getSymbol() {
        return symbol;
    }

    /**
     * Setter for Symbol.
     * @param symbol Value for String
     */
    @JsonSetter("symbol")
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Getter for Faction.
     * @return Returns the String
     */
    @JsonGetter("faction")
    public String getFaction() {
        return faction;
    }

    /**
     * Setter for Faction.
     * @param faction Value for String
     */
    @JsonSetter("faction")
    public void setFaction(String faction) {
        this.faction = faction;
    }

    /**
     * Converts this Shipyard into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Shipyard [" + "symbol=" + symbol + ", faction=" + faction + "]";
    }

    /**
     * Builds a new {@link Shipyard.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Shipyard.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(symbol, faction);
        return builder;
    }

    /**
     * Class to build instances of {@link Shipyard}.
     */
    public static class Builder {
        private String symbol;
        private String faction;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  symbol  String value for symbol.
         * @param  faction  String value for faction.
         */
        public Builder(String symbol, String faction) {
            this.symbol = symbol;
            this.faction = faction;
        }

        /**
         * Setter for symbol.
         * @param  symbol  String value for symbol.
         * @return Builder
         */
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }

        /**
         * Setter for faction.
         * @param  faction  String value for faction.
         * @return Builder
         */
        public Builder faction(String faction) {
            this.faction = faction;
            return this;
        }

        /**
         * Builds a new {@link Shipyard} object using the set fields.
         * @return {@link Shipyard}
         */
        public Shipyard build() {
            return new Shipyard(symbol, faction);
        }
    }
}
