/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.spacetraders.alpha.v200.internal.OptionalNullable;
import java.util.List;

/**
 * This is a model class for System type.
 */
public class System {
    private String symbol;
    private String sector;
    private String type;
    private int x;
    private int y;
    private List<String> waypoints;
    private List<String> factions;
    private boolean charted;
    private OptionalNullable<String> chartedBy;

    /**
     * Default constructor.
     */
    public System() {
    }

    /**
     * Initialization constructor.
     * @param  symbol  String value for symbol.
     * @param  sector  String value for sector.
     * @param  type  String value for type.
     * @param  x  int value for x.
     * @param  y  int value for y.
     * @param  waypoints  List of String value for waypoints.
     * @param  factions  List of String value for factions.
     * @param  charted  boolean value for charted.
     * @param  chartedBy  String value for chartedBy.
     */
    public System(
            String symbol,
            String sector,
            String type,
            int x,
            int y,
            List<String> waypoints,
            List<String> factions,
            boolean charted,
            String chartedBy) {
        this.symbol = symbol;
        this.sector = sector;
        this.type = type;
        this.x = x;
        this.y = y;
        this.waypoints = waypoints;
        this.factions = factions;
        this.charted = charted;
        this.chartedBy = OptionalNullable.of(chartedBy);
    }

    /**
     * Internal initialization constructor.
     */
    protected System(String symbol, String sector, String type, int x, int y,
            List<String> waypoints, List<String> factions, boolean charted,
            OptionalNullable<String> chartedBy) {
        this.symbol = symbol;
        this.sector = sector;
        this.type = type;
        this.x = x;
        this.y = y;
        this.waypoints = waypoints;
        this.factions = factions;
        this.charted = charted;
        this.chartedBy = chartedBy;
    }

    /**
     * Getter for Symbol.
     * @return Returns the String
     */
    @JsonGetter("symbol")
    public String getSymbol() {
        return symbol;
    }

    /**
     * Setter for Symbol.
     * @param symbol Value for String
     */
    @JsonSetter("symbol")
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Getter for Sector.
     * @return Returns the String
     */
    @JsonGetter("sector")
    public String getSector() {
        return sector;
    }

    /**
     * Setter for Sector.
     * @param sector Value for String
     */
    @JsonSetter("sector")
    public void setSector(String sector) {
        this.sector = sector;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for X.
     * @return Returns the int
     */
    @JsonGetter("x")
    public int getX() {
        return x;
    }

    /**
     * Setter for X.
     * @param x Value for int
     */
    @JsonSetter("x")
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Getter for Y.
     * @return Returns the int
     */
    @JsonGetter("y")
    public int getY() {
        return y;
    }

    /**
     * Setter for Y.
     * @param y Value for int
     */
    @JsonSetter("y")
    public void setY(int y) {
        this.y = y;
    }

    /**
     * Getter for Waypoints.
     * @return Returns the List of String
     */
    @JsonGetter("waypoints")
    public List<String> getWaypoints() {
        return waypoints;
    }

    /**
     * Setter for Waypoints.
     * @param waypoints Value for List of String
     */
    @JsonSetter("waypoints")
    public void setWaypoints(List<String> waypoints) {
        this.waypoints = waypoints;
    }

    /**
     * Getter for Factions.
     * @return Returns the List of String
     */
    @JsonGetter("factions")
    public List<String> getFactions() {
        return factions;
    }

    /**
     * Setter for Factions.
     * @param factions Value for List of String
     */
    @JsonSetter("factions")
    public void setFactions(List<String> factions) {
        this.factions = factions;
    }

    /**
     * Getter for Charted.
     * @return Returns the boolean
     */
    @JsonGetter("charted")
    public boolean getCharted() {
        return charted;
    }

    /**
     * Setter for Charted.
     * @param charted Value for boolean
     */
    @JsonSetter("charted")
    public void setCharted(boolean charted) {
        this.charted = charted;
    }

    /**
     * Internal Getter for ChartedBy.
     * @return Returns the Internal String
     */
    @JsonGetter("chartedBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetChartedBy() {
        return this.chartedBy;
    }

    /**
     * Getter for ChartedBy.
     * @return Returns the String
     */
    public String getChartedBy() {
        return OptionalNullable.getFrom(chartedBy);
    }

    /**
     * Setter for ChartedBy.
     * @param chartedBy Value for String
     */
    @JsonSetter("chartedBy")
    public void setChartedBy(String chartedBy) {
        this.chartedBy = OptionalNullable.of(chartedBy);
    }

    /**
     * UnSetter for ChartedBy.
     */
    public void unsetChartedBy() {
        chartedBy = null;
    }

    /**
     * Converts this System into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "System [" + "symbol=" + symbol + ", sector=" + sector + ", type=" + type + ", x="
                + x + ", y=" + y + ", waypoints=" + waypoints + ", factions=" + factions
                + ", charted=" + charted + ", chartedBy=" + chartedBy + "]";
    }

    /**
     * Builds a new {@link System.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link System.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(symbol, sector, type, x, y, waypoints, factions, charted);
        builder.chartedBy = internalGetChartedBy();
        return builder;
    }

    /**
     * Class to build instances of {@link System}.
     */
    public static class Builder {
        private String symbol;
        private String sector;
        private String type;
        private int x;
        private int y;
        private List<String> waypoints;
        private List<String> factions;
        private boolean charted;
        private OptionalNullable<String> chartedBy;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  symbol  String value for symbol.
         * @param  sector  String value for sector.
         * @param  type  String value for type.
         * @param  x  int value for x.
         * @param  y  int value for y.
         * @param  waypoints  List of String value for waypoints.
         * @param  factions  List of String value for factions.
         * @param  charted  boolean value for charted.
         */
        public Builder(String symbol, String sector, String type, int x, int y,
                List<String> waypoints, List<String> factions, boolean charted) {
            this.symbol = symbol;
            this.sector = sector;
            this.type = type;
            this.x = x;
            this.y = y;
            this.waypoints = waypoints;
            this.factions = factions;
            this.charted = charted;
        }

        /**
         * Setter for symbol.
         * @param  symbol  String value for symbol.
         * @return Builder
         */
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }

        /**
         * Setter for sector.
         * @param  sector  String value for sector.
         * @return Builder
         */
        public Builder sector(String sector) {
            this.sector = sector;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for x.
         * @param  x  int value for x.
         * @return Builder
         */
        public Builder x(int x) {
            this.x = x;
            return this;
        }

        /**
         * Setter for y.
         * @param  y  int value for y.
         * @return Builder
         */
        public Builder y(int y) {
            this.y = y;
            return this;
        }

        /**
         * Setter for waypoints.
         * @param  waypoints  List of String value for waypoints.
         * @return Builder
         */
        public Builder waypoints(List<String> waypoints) {
            this.waypoints = waypoints;
            return this;
        }

        /**
         * Setter for factions.
         * @param  factions  List of String value for factions.
         * @return Builder
         */
        public Builder factions(List<String> factions) {
            this.factions = factions;
            return this;
        }

        /**
         * Setter for charted.
         * @param  charted  boolean value for charted.
         * @return Builder
         */
        public Builder charted(boolean charted) {
            this.charted = charted;
            return this;
        }

        /**
         * Setter for chartedBy.
         * @param  chartedBy  String value for chartedBy.
         * @return Builder
         */
        public Builder chartedBy(String chartedBy) {
            this.chartedBy = OptionalNullable.of(chartedBy);
            return this;
        }

        /**
         * UnSetter for chartedBy.
         * @return Builder
         */
        public Builder unsetChartedBy() {
            chartedBy = null;
            return this;
        }

        /**
         * Builds a new {@link System} object using the set fields.
         * @return {@link System}
         */
        public System build() {
            return new System(symbol, sector, type, x, y, waypoints, factions, charted, chartedBy);
        }
    }
}
