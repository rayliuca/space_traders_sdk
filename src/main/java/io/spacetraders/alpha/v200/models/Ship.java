/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Ship type.
 */
public class Ship {
    private String symbol;
    private String frame;
    private String reactor;
    private String engine;
    private List<String> modules;
    private List<String> mounts;
    private Registration1 registration;
    private Integrity integrity;
    private Stats stats;
    private String status;
    private String location;
    private List<Cargo> cargo;
    private int fuel;

    /**
     * Default constructor.
     */
    public Ship() {
    }

    /**
     * Initialization constructor.
     * @param  symbol  String value for symbol.
     * @param  frame  String value for frame.
     * @param  reactor  String value for reactor.
     * @param  engine  String value for engine.
     * @param  modules  List of String value for modules.
     * @param  mounts  List of String value for mounts.
     * @param  registration  Registration1 value for registration.
     * @param  integrity  Integrity value for integrity.
     * @param  status  String value for status.
     * @param  location  String value for location.
     * @param  cargo  List of Cargo value for cargo.
     * @param  fuel  int value for fuel.
     * @param  stats  Stats value for stats.
     */
    public Ship(
            String symbol,
            String frame,
            String reactor,
            String engine,
            List<String> modules,
            List<String> mounts,
            Registration1 registration,
            Integrity integrity,
            String status,
            String location,
            List<Cargo> cargo,
            int fuel,
            Stats stats) {
        this.symbol = symbol;
        this.frame = frame;
        this.reactor = reactor;
        this.engine = engine;
        this.modules = modules;
        this.mounts = mounts;
        this.registration = registration;
        this.integrity = integrity;
        this.stats = stats;
        this.status = status;
        this.location = location;
        this.cargo = cargo;
        this.fuel = fuel;
    }

    /**
     * Getter for Symbol.
     * @return Returns the String
     */
    @JsonGetter("symbol")
    public String getSymbol() {
        return symbol;
    }

    /**
     * Setter for Symbol.
     * @param symbol Value for String
     */
    @JsonSetter("symbol")
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Getter for Frame.
     * @return Returns the String
     */
    @JsonGetter("frame")
    public String getFrame() {
        return frame;
    }

    /**
     * Setter for Frame.
     * @param frame Value for String
     */
    @JsonSetter("frame")
    public void setFrame(String frame) {
        this.frame = frame;
    }

    /**
     * Getter for Reactor.
     * @return Returns the String
     */
    @JsonGetter("reactor")
    public String getReactor() {
        return reactor;
    }

    /**
     * Setter for Reactor.
     * @param reactor Value for String
     */
    @JsonSetter("reactor")
    public void setReactor(String reactor) {
        this.reactor = reactor;
    }

    /**
     * Getter for Engine.
     * @return Returns the String
     */
    @JsonGetter("engine")
    public String getEngine() {
        return engine;
    }

    /**
     * Setter for Engine.
     * @param engine Value for String
     */
    @JsonSetter("engine")
    public void setEngine(String engine) {
        this.engine = engine;
    }

    /**
     * Getter for Modules.
     * @return Returns the List of String
     */
    @JsonGetter("modules")
    public List<String> getModules() {
        return modules;
    }

    /**
     * Setter for Modules.
     * @param modules Value for List of String
     */
    @JsonSetter("modules")
    public void setModules(List<String> modules) {
        this.modules = modules;
    }

    /**
     * Getter for Mounts.
     * @return Returns the List of String
     */
    @JsonGetter("mounts")
    public List<String> getMounts() {
        return mounts;
    }

    /**
     * Setter for Mounts.
     * @param mounts Value for List of String
     */
    @JsonSetter("mounts")
    public void setMounts(List<String> mounts) {
        this.mounts = mounts;
    }

    /**
     * Getter for Registration.
     * @return Returns the Registration1
     */
    @JsonGetter("registration")
    public Registration1 getRegistration() {
        return registration;
    }

    /**
     * Setter for Registration.
     * @param registration Value for Registration1
     */
    @JsonSetter("registration")
    public void setRegistration(Registration1 registration) {
        this.registration = registration;
    }

    /**
     * Getter for Integrity.
     * @return Returns the Integrity
     */
    @JsonGetter("integrity")
    public Integrity getIntegrity() {
        return integrity;
    }

    /**
     * Setter for Integrity.
     * @param integrity Value for Integrity
     */
    @JsonSetter("integrity")
    public void setIntegrity(Integrity integrity) {
        this.integrity = integrity;
    }

    /**
     * Getter for Stats.
     * @return Returns the Stats
     */
    @JsonGetter("stats")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Stats getStats() {
        return stats;
    }

    /**
     * Setter for Stats.
     * @param stats Value for Stats
     */
    @JsonSetter("stats")
    public void setStats(Stats stats) {
        this.stats = stats;
    }

    /**
     * Getter for Status.
     * @return Returns the String
     */
    @JsonGetter("status")
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for String
     */
    @JsonSetter("status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Location.
     * @return Returns the String
     */
    @JsonGetter("location")
    public String getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Getter for Cargo.
     * @return Returns the List of Cargo
     */
    @JsonGetter("cargo")
    public List<Cargo> getCargo() {
        return cargo;
    }

    /**
     * Setter for Cargo.
     * @param cargo Value for List of Cargo
     */
    @JsonSetter("cargo")
    public void setCargo(List<Cargo> cargo) {
        this.cargo = cargo;
    }

    /**
     * Getter for Fuel.
     * @return Returns the int
     */
    @JsonGetter("fuel")
    public int getFuel() {
        return fuel;
    }

    /**
     * Setter for Fuel.
     * @param fuel Value for int
     */
    @JsonSetter("fuel")
    public void setFuel(int fuel) {
        this.fuel = fuel;
    }

    /**
     * Converts this Ship into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Ship [" + "symbol=" + symbol + ", frame=" + frame + ", reactor=" + reactor
                + ", engine=" + engine + ", modules=" + modules + ", mounts=" + mounts
                + ", registration=" + registration + ", integrity=" + integrity + ", status="
                + status + ", location=" + location + ", cargo=" + cargo + ", fuel=" + fuel
                + ", stats=" + stats + "]";
    }

    /**
     * Builds a new {@link Ship.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Ship.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(symbol, frame, reactor, engine, modules, mounts, registration,
                integrity, status, location, cargo, fuel)
                .stats(getStats());
        return builder;
    }

    /**
     * Class to build instances of {@link Ship}.
     */
    public static class Builder {
        private String symbol;
        private String frame;
        private String reactor;
        private String engine;
        private List<String> modules;
        private List<String> mounts;
        private Registration1 registration;
        private Integrity integrity;
        private String status;
        private String location;
        private List<Cargo> cargo;
        private int fuel;
        private Stats stats;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  symbol  String value for symbol.
         * @param  frame  String value for frame.
         * @param  reactor  String value for reactor.
         * @param  engine  String value for engine.
         * @param  modules  List of String value for modules.
         * @param  mounts  List of String value for mounts.
         * @param  registration  Registration1 value for registration.
         * @param  integrity  Integrity value for integrity.
         * @param  status  String value for status.
         * @param  location  String value for location.
         * @param  cargo  List of Cargo value for cargo.
         * @param  fuel  int value for fuel.
         */
        public Builder(String symbol, String frame, String reactor, String engine,
                List<String> modules, List<String> mounts, Registration1 registration,
                Integrity integrity, String status, String location, List<Cargo> cargo, int fuel) {
            this.symbol = symbol;
            this.frame = frame;
            this.reactor = reactor;
            this.engine = engine;
            this.modules = modules;
            this.mounts = mounts;
            this.registration = registration;
            this.integrity = integrity;
            this.status = status;
            this.location = location;
            this.cargo = cargo;
            this.fuel = fuel;
        }

        /**
         * Setter for symbol.
         * @param  symbol  String value for symbol.
         * @return Builder
         */
        public Builder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }

        /**
         * Setter for frame.
         * @param  frame  String value for frame.
         * @return Builder
         */
        public Builder frame(String frame) {
            this.frame = frame;
            return this;
        }

        /**
         * Setter for reactor.
         * @param  reactor  String value for reactor.
         * @return Builder
         */
        public Builder reactor(String reactor) {
            this.reactor = reactor;
            return this;
        }

        /**
         * Setter for engine.
         * @param  engine  String value for engine.
         * @return Builder
         */
        public Builder engine(String engine) {
            this.engine = engine;
            return this;
        }

        /**
         * Setter for modules.
         * @param  modules  List of String value for modules.
         * @return Builder
         */
        public Builder modules(List<String> modules) {
            this.modules = modules;
            return this;
        }

        /**
         * Setter for mounts.
         * @param  mounts  List of String value for mounts.
         * @return Builder
         */
        public Builder mounts(List<String> mounts) {
            this.mounts = mounts;
            return this;
        }

        /**
         * Setter for registration.
         * @param  registration  Registration1 value for registration.
         * @return Builder
         */
        public Builder registration(Registration1 registration) {
            this.registration = registration;
            return this;
        }

        /**
         * Setter for integrity.
         * @param  integrity  Integrity value for integrity.
         * @return Builder
         */
        public Builder integrity(Integrity integrity) {
            this.integrity = integrity;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for cargo.
         * @param  cargo  List of Cargo value for cargo.
         * @return Builder
         */
        public Builder cargo(List<Cargo> cargo) {
            this.cargo = cargo;
            return this;
        }

        /**
         * Setter for fuel.
         * @param  fuel  int value for fuel.
         * @return Builder
         */
        public Builder fuel(int fuel) {
            this.fuel = fuel;
            return this;
        }

        /**
         * Setter for stats.
         * @param  stats  Stats value for stats.
         * @return Builder
         */
        public Builder stats(Stats stats) {
            this.stats = stats;
            return this;
        }

        /**
         * Builds a new {@link Ship} object using the set fields.
         * @return {@link Ship}
         */
        public Ship build() {
            return new Ship(symbol, frame, reactor, engine, modules, mounts, registration,
                    integrity, status, location, cargo, fuel, stats);
        }
    }
}
