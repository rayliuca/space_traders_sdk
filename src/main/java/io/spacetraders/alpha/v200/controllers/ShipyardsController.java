/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsRequest;
import io.spacetraders.alpha.v200.models.MyShipsResponse2;
import io.spacetraders.alpha.v200.models.SystemsShipyardsResponse;
import io.spacetraders.alpha.v200.models.SystemsShipyardsResponse1;
import io.spacetraders.alpha.v200.models.SystemsShipyardsShipsResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ShipyardsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ShipyardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ShipyardsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Purchase a ship.
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsResponse2 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsResponse2 postMyShips(
            final MyShipsRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsResponse(context);
    }

    /**
     * Purchase a ship.
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsResponse2 response from the API call
     */
    public CompletableFuture<MyShipsResponse2> postMyShipsAsync(
            final MyShipsRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShips.
     */
    private HttpRequest buildPostMyShipsRequest(
            final MyShipsRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShips.
     * @return An object of type MyShipsResponse2
     */
    private MyShipsResponse2 handlePostMyShipsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsResponse2 result = ApiHelper.deserialize(responseBody,
                MyShipsResponse2.class);

        return result;
    }

    /**
     * Returns a list of all shipyards in a system.
     * @param  systemSymbol  Required parameter: the system symbol
     * @return    Returns the SystemsShipyardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsShipyardsResponse getSystemsSystemSymbolShipyards(
            final String systemSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolShipyardsRequest(systemSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolShipyardsResponse(context);
    }

    /**
     * Returns a list of all shipyards in a system.
     * @param  systemSymbol  Required parameter: the system symbol
     * @return    Returns the SystemsShipyardsResponse response from the API call
     */
    public CompletableFuture<SystemsShipyardsResponse> getSystemsSystemSymbolShipyardsAsync(
            final String systemSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolShipyardsRequest(systemSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolShipyardsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolShipyards.
     */
    private HttpRequest buildGetSystemsSystemSymbolShipyardsRequest(
            final String systemSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/shipyards");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolShipyards.
     * @return An object of type SystemsShipyardsResponse
     */
    private SystemsShipyardsResponse handleGetSystemsSystemSymbolShipyardsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsShipyardsResponse result = ApiHelper.deserialize(responseBody,
                SystemsShipyardsResponse.class);

        return result;
    }

    /**
     * Shipyard Details.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsShipyardsResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsShipyardsResponse1 getSystemsSystemSymbolShipyardsWaypointSymbol(
            final String systemSymbol,
            final String waypointSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolShipyardsWaypointSymbolRequest(
                systemSymbol, waypointSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolShipyardsWaypointSymbolResponse(context);
    }

    /**
     * Shipyard Details.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsShipyardsResponse1 response from the API call
     */
    public CompletableFuture<SystemsShipyardsResponse1> getSystemsSystemSymbolShipyardsWaypointSymbolAsync(
            final String systemSymbol,
            final String waypointSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolShipyardsWaypointSymbolRequest(
                systemSymbol, waypointSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolShipyardsWaypointSymbolResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolShipyardsWaypointSymbol.
     */
    private HttpRequest buildGetSystemsSystemSymbolShipyardsWaypointSymbolRequest(
            final String systemSymbol,
            final String waypointSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/shipyards/{waypointSymbol}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        templateParameters.put("waypointSymbol",
                new SimpleEntry<Object, Boolean>(waypointSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolShipyardsWaypointSymbol.
     * @return An object of type SystemsShipyardsResponse1
     */
    private SystemsShipyardsResponse1 handleGetSystemsSystemSymbolShipyardsWaypointSymbolResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsShipyardsResponse1 result = ApiHelper.deserialize(responseBody,
                SystemsShipyardsResponse1.class);

        return result;
    }

    /**
     * Shipyard Listings.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsShipyardsShipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsShipyardsShipsResponse getSystemsSystemSymbolShipyardsWaypointSymbolShips(
            final String systemSymbol,
            final String waypointSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolShipyardsWaypointSymbolShipsRequest(
                systemSymbol, waypointSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolShipyardsWaypointSymbolShipsResponse(context);
    }

    /**
     * Shipyard Listings.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsShipyardsShipsResponse response from the API call
     */
    public CompletableFuture<SystemsShipyardsShipsResponse> getSystemsSystemSymbolShipyardsWaypointSymbolShipsAsync(
            final String systemSymbol,
            final String waypointSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolShipyardsWaypointSymbolShipsRequest(
                systemSymbol, waypointSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolShipyardsWaypointSymbolShipsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolShipyardsWaypointSymbolShips.
     */
    private HttpRequest buildGetSystemsSystemSymbolShipyardsWaypointSymbolShipsRequest(
            final String systemSymbol,
            final String waypointSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/shipyards/{waypointSymbol}/ships");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        templateParameters.put("waypointSymbol",
                new SimpleEntry<Object, Boolean>(waypointSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolShipyardsWaypointSymbolShips.
     * @return An object of type SystemsShipyardsShipsResponse
     */
    private SystemsShipyardsShipsResponse handleGetSystemsSystemSymbolShipyardsWaypointSymbolShipsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsShipyardsShipsResponse result = ApiHelper.deserialize(responseBody,
                SystemsShipyardsShipsResponse.class);

        return result;
    }

}