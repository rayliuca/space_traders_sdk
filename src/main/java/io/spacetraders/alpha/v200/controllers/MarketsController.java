/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsDeployRequest;
import io.spacetraders.alpha.v200.models.SystemsMarketsResponse;
import io.spacetraders.alpha.v200.models.SystemsMarketsResponse1;
import io.spacetraders.alpha.v200.models.TradeExchangeResponse;
import io.spacetraders.alpha.v200.models.TradeExportsResponse;
import io.spacetraders.alpha.v200.models.TradeImportsResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MarketsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public MarketsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public MarketsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Use this endpoint to deploy a Communications Relay to a waypoint. A waypoint with a
     * communications relay will allow agents to retrieve price information from the market. Without
     * a relay, agents must send a ship to a market to retrieve price information. Communication
     * relays can be purchased from a market that exports `COMM_RELAY_I`.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void postMyShipsShipSymbolDeploy(
            final String shipSymbol,
            final MyShipsDeployRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolDeployRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handlePostMyShipsShipSymbolDeployResponse(context);
    }

    /**
     * Use this endpoint to deploy a Communications Relay to a waypoint. A waypoint with a
     * communications relay will allow agents to retrieve price information from the market. Without
     * a relay, agents must send a ship to a market to retrieve price information. Communication
     * relays can be purchased from a market that exports `COMM_RELAY_I`.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> postMyShipsShipSymbolDeployAsync(
            final String shipSymbol,
            final MyShipsDeployRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolDeployRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolDeployResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolDeploy.
     */
    private HttpRequest buildPostMyShipsShipSymbolDeployRequest(
            final String shipSymbol,
            final MyShipsDeployRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/deploy");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolDeploy.
     * @return An object of type void
     */
    private Void handlePostMyShipsShipSymbolDeployResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * Trade Imports.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeImportsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TradeImportsResponse getTradeTradeSymbolImports(
            final String tradeSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetTradeTradeSymbolImportsRequest(tradeSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTradeTradeSymbolImportsResponse(context);
    }

    /**
     * Trade Imports.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeImportsResponse response from the API call
     */
    public CompletableFuture<TradeImportsResponse> getTradeTradeSymbolImportsAsync(
            final String tradeSymbol) {
        return makeHttpCallAsync(() -> buildGetTradeTradeSymbolImportsRequest(tradeSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTradeTradeSymbolImportsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTradeTradeSymbolImports.
     */
    private HttpRequest buildGetTradeTradeSymbolImportsRequest(
            final String tradeSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/trade/{tradeSymbol}/imports");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tradeSymbol",
                new SimpleEntry<Object, Boolean>(tradeSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTradeTradeSymbolImports.
     * @return An object of type TradeImportsResponse
     */
    private TradeImportsResponse handleGetTradeTradeSymbolImportsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TradeImportsResponse result = ApiHelper.deserialize(responseBody,
                TradeImportsResponse.class);

        return result;
    }

    /**
     * Trade Exports.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeExportsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TradeExportsResponse getTradeTradeSymbolExports(
            final String tradeSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetTradeTradeSymbolExportsRequest(tradeSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTradeTradeSymbolExportsResponse(context);
    }

    /**
     * Trade Exports.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeExportsResponse response from the API call
     */
    public CompletableFuture<TradeExportsResponse> getTradeTradeSymbolExportsAsync(
            final String tradeSymbol) {
        return makeHttpCallAsync(() -> buildGetTradeTradeSymbolExportsRequest(tradeSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTradeTradeSymbolExportsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTradeTradeSymbolExports.
     */
    private HttpRequest buildGetTradeTradeSymbolExportsRequest(
            final String tradeSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/trade/{tradeSymbol}/exports");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tradeSymbol",
                new SimpleEntry<Object, Boolean>(tradeSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTradeTradeSymbolExports.
     * @return An object of type TradeExportsResponse
     */
    private TradeExportsResponse handleGetTradeTradeSymbolExportsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TradeExportsResponse result = ApiHelper.deserialize(responseBody,
                TradeExportsResponse.class);

        return result;
    }

    /**
     * Trade Exchanges.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeExchangeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TradeExchangeResponse getTradeTradeSymbolExchange(
            final String tradeSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetTradeTradeSymbolExchangeRequest(tradeSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTradeTradeSymbolExchangeResponse(context);
    }

    /**
     * Trade Exchanges.
     * @param  tradeSymbol  Required parameter: The trade symbol
     * @return    Returns the TradeExchangeResponse response from the API call
     */
    public CompletableFuture<TradeExchangeResponse> getTradeTradeSymbolExchangeAsync(
            final String tradeSymbol) {
        return makeHttpCallAsync(() -> buildGetTradeTradeSymbolExchangeRequest(tradeSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTradeTradeSymbolExchangeResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTradeTradeSymbolExchange.
     */
    private HttpRequest buildGetTradeTradeSymbolExchangeRequest(
            final String tradeSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/trade/{tradeSymbol}/exchange");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("tradeSymbol",
                new SimpleEntry<Object, Boolean>(tradeSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTradeTradeSymbolExchange.
     * @return An object of type TradeExchangeResponse
     */
    private TradeExchangeResponse handleGetTradeTradeSymbolExchangeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        TradeExchangeResponse result = ApiHelper.deserialize(responseBody,
                TradeExchangeResponse.class);

        return result;
    }

    /**
     * Retrieve a list of all charted markets in the given system. Markets are only available if the
     * waypoint is charted and contains a communications relay. To install a communications relay at
     * a market, look at the `my/ships/{shipSymbol}/deploy` endpoint.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsMarketsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsMarketsResponse getSystemsSystemSymbolMarkets(
            final String systemSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolMarketsRequest(systemSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolMarketsResponse(context);
    }

    /**
     * Retrieve a list of all charted markets in the given system. Markets are only available if the
     * waypoint is charted and contains a communications relay. To install a communications relay at
     * a market, look at the `my/ships/{shipSymbol}/deploy` endpoint.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsMarketsResponse response from the API call
     */
    public CompletableFuture<SystemsMarketsResponse> getSystemsSystemSymbolMarketsAsync(
            final String systemSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolMarketsRequest(systemSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolMarketsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolMarkets.
     */
    private HttpRequest buildGetSystemsSystemSymbolMarketsRequest(
            final String systemSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/markets");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolMarkets.
     * @return An object of type SystemsMarketsResponse
     */
    private SystemsMarketsResponse handleGetSystemsSystemSymbolMarketsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsMarketsResponse result = ApiHelper.deserialize(responseBody,
                SystemsMarketsResponse.class);

        return result;
    }

    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports
     * can be purchased, and exchange trades can be purchased or sold. Market data is only available
     * if you have a ship at the location, or the location is charted and has a communications relay
     * deployed. See `/my/ships/{shipSymbol}/deploy` for deploying relays at a location.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsMarketsResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsMarketsResponse1 getSystemsSystemSymbolMarketsWaypointSymbol(
            final String systemSymbol,
            final String waypointSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolMarketsWaypointSymbolRequest(systemSymbol,
                waypointSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolMarketsWaypointSymbolResponse(context);
    }

    /**
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports
     * can be purchased, and exchange trades can be purchased or sold. Market data is only available
     * if you have a ship at the location, or the location is charted and has a communications relay
     * deployed. See `/my/ships/{shipSymbol}/deploy` for deploying relays at a location.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsMarketsResponse1 response from the API call
     */
    public CompletableFuture<SystemsMarketsResponse1> getSystemsSystemSymbolMarketsWaypointSymbolAsync(
            final String systemSymbol,
            final String waypointSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolMarketsWaypointSymbolRequest(
                systemSymbol, waypointSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolMarketsWaypointSymbolResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolMarketsWaypointSymbol.
     */
    private HttpRequest buildGetSystemsSystemSymbolMarketsWaypointSymbolRequest(
            final String systemSymbol,
            final String waypointSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/markets/{waypointSymbol}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        templateParameters.put("waypointSymbol",
                new SimpleEntry<Object, Boolean>(waypointSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolMarketsWaypointSymbol.
     * @return An object of type SystemsMarketsResponse1
     */
    private SystemsMarketsResponse1 handleGetSystemsSystemSymbolMarketsWaypointSymbolResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsMarketsResponse1 result = ApiHelper.deserialize(responseBody,
                SystemsMarketsResponse1.class);

        return result;
    }

}