/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsExtractRequest;
import io.spacetraders.alpha.v200.models.MyShipsExtractResponse;
import io.spacetraders.alpha.v200.models.MyShipsExtractResponse1;
import io.spacetraders.alpha.v200.models.MyShipsSurveyResponse;
import io.spacetraders.alpha.v200.models.MyShipsSurveyResponse1;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ExtractController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ExtractController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ExtractController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Extract resources from the waypoint into your ship. Send a survey as the payload to target
     * specific yields. The entire survey must be sent as it contains a signature that the backend
     * verifies.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsExtractResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsExtractResponse postMyShipsShipSymbolExtract(
            final String shipSymbol,
            final MyShipsExtractRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolExtractRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolExtractResponse(context);
    }

    /**
     * Extract resources from the waypoint into your ship. Send a survey as the payload to target
     * specific yields. The entire survey must be sent as it contains a signature that the backend
     * verifies.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsExtractResponse response from the API call
     */
    public CompletableFuture<MyShipsExtractResponse> postMyShipsShipSymbolExtractAsync(
            final String shipSymbol,
            final MyShipsExtractRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolExtractRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolExtractResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolExtract.
     */
    private HttpRequest buildPostMyShipsShipSymbolExtractRequest(
            final String shipSymbol,
            final MyShipsExtractRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/extract");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolExtract.
     * @return An object of type MyShipsExtractResponse
     */
    private MyShipsExtractResponse handlePostMyShipsShipSymbolExtractResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsExtractResponse result = ApiHelper.deserialize(responseBody,
                MyShipsExtractResponse.class);

        return result;
    }

    /**
     * Get the status of your last extraction.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @return    Returns the MyShipsExtractResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsExtractResponse1 getMyShipsShipSymbolExtract(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolExtractRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolExtractResponse(context);
    }

    /**
     * Get the status of your last extraction.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @return    Returns the MyShipsExtractResponse1 response from the API call
     */
    public CompletableFuture<MyShipsExtractResponse1> getMyShipsShipSymbolExtractAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolExtractRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolExtractResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbolExtract.
     */
    private HttpRequest buildGetMyShipsShipSymbolExtractRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/extract");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbolExtract.
     * @return An object of type MyShipsExtractResponse1
     */
    private MyShipsExtractResponse1 handleGetMyShipsShipSymbolExtractResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsExtractResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsExtractResponse1.class);

        return result;
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as
     * an asteroid field, and send the survey in the body of the extract request. Each survey may
     * have multiple deposits, and if a symbol shows up more than once, that indicates a higher
     * chance of extracting that resource. Your ship will enter a cooldown between consecutive
     * survey requests. Surveys will eventually expire after a period of time. Multiple ships can
     * use the same survey for extraction.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsSurveyResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsSurveyResponse postMyShipsShipSymbolSurvey(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolSurveyRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolSurveyResponse(context);
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as
     * an asteroid field, and send the survey in the body of the extract request. Each survey may
     * have multiple deposits, and if a symbol shows up more than once, that indicates a higher
     * chance of extracting that resource. Your ship will enter a cooldown between consecutive
     * survey requests. Surveys will eventually expire after a period of time. Multiple ships can
     * use the same survey for extraction.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsSurveyResponse response from the API call
     */
    public CompletableFuture<MyShipsSurveyResponse> postMyShipsShipSymbolSurveyAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolSurveyRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolSurveyResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolSurvey.
     */
    private HttpRequest buildPostMyShipsShipSymbolSurveyRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/survey");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolSurvey.
     * @return An object of type MyShipsSurveyResponse
     */
    private MyShipsSurveyResponse handlePostMyShipsShipSymbolSurveyResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsSurveyResponse result = ApiHelper.deserialize(responseBody,
                MyShipsSurveyResponse.class);

        return result;
    }

    /**
     * Executing a survey will initiate a cooldown for a number of seconds before you can call it
     * again. This endpoint returns the details of your cooldown, or a 404 if there is no cooldown
     * for the survey action.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsSurveyResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsSurveyResponse1 getMyShipsShipSymbolSurvey(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolSurveyRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolSurveyResponse(context);
    }

    /**
     * Executing a survey will initiate a cooldown for a number of seconds before you can call it
     * again. This endpoint returns the details of your cooldown, or a 404 if there is no cooldown
     * for the survey action.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsSurveyResponse1 response from the API call
     */
    public CompletableFuture<MyShipsSurveyResponse1> getMyShipsShipSymbolSurveyAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolSurveyRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolSurveyResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbolSurvey.
     */
    private HttpRequest buildGetMyShipsShipSymbolSurveyRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/survey");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbolSurvey.
     * @return An object of type MyShipsSurveyResponse1
     */
    private MyShipsSurveyResponse1 handleGetMyShipsShipSymbolSurveyResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsSurveyResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsSurveyResponse1.class);

        return result;
    }

}