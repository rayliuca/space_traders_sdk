/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsJettisonRequest;
import io.spacetraders.alpha.v200.models.MyShipsJettisonResponse;
import io.spacetraders.alpha.v200.models.MyShipsResponse;
import io.spacetraders.alpha.v200.models.MyShipsResponse1;
import io.spacetraders.alpha.v200.models.MyShipsScanRequest;
import io.spacetraders.alpha.v200.models.MyShipsScanResponse;
import io.spacetraders.alpha.v200.models.MyShipsScanResponse1;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ShipsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ShipsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ShipsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Jettison cargo from your ship's cargo hold.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsJettisonResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsJettisonResponse postMyShipsShipSymbolJettison(
            final String shipSymbol,
            final MyShipsJettisonRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolJettisonRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolJettisonResponse(context);
    }

    /**
     * Jettison cargo from your ship's cargo hold.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsJettisonResponse response from the API call
     */
    public CompletableFuture<MyShipsJettisonResponse> postMyShipsShipSymbolJettisonAsync(
            final String shipSymbol,
            final MyShipsJettisonRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolJettisonRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolJettisonResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolJettison.
     */
    private HttpRequest buildPostMyShipsShipSymbolJettisonRequest(
            final String shipSymbol,
            final MyShipsJettisonRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/jettison");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolJettison.
     * @return An object of type MyShipsJettisonResponse
     */
    private MyShipsJettisonResponse handlePostMyShipsShipSymbolJettisonResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsJettisonResponse result = ApiHelper.deserialize(responseBody,
                MyShipsJettisonResponse.class);

        return result;
    }

    /**
     * Execute a ship scan to view approach / departing ships, system information or details about a
     * waypoint. Send a scan mode to select the type of scan performed by your ship.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsScanResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsScanResponse postMyShipsShipSymbolScan(
            final String shipSymbol,
            final MyShipsScanRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolScanRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolScanResponse(context);
    }

    /**
     * Execute a ship scan to view approach / departing ships, system information or details about a
     * waypoint. Send a scan mode to select the type of scan performed by your ship.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsScanResponse response from the API call
     */
    public CompletableFuture<MyShipsScanResponse> postMyShipsShipSymbolScanAsync(
            final String shipSymbol,
            final MyShipsScanRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolScanRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolScanResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolScan.
     */
    private HttpRequest buildPostMyShipsShipSymbolScanRequest(
            final String shipSymbol,
            final MyShipsScanRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/scan");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolScan.
     * @return An object of type MyShipsScanResponse
     */
    private MyShipsScanResponse handlePostMyShipsShipSymbolScanResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsScanResponse result = ApiHelper.deserialize(responseBody,
                MyShipsScanResponse.class);

        return result;
    }

    /**
     * Scan Cooldown.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsScanResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsScanResponse1 getMyShipsShipSymbolScan(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolScanRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolScanResponse(context);
    }

    /**
     * Scan Cooldown.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsScanResponse1 response from the API call
     */
    public CompletableFuture<MyShipsScanResponse1> getMyShipsShipSymbolScanAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolScanRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolScanResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbolScan.
     */
    private HttpRequest buildGetMyShipsShipSymbolScanRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/scan");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbolScan.
     * @return An object of type MyShipsScanResponse1
     */
    private MyShipsScanResponse1 handleGetMyShipsShipSymbolScanResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsScanResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsScanResponse1.class);

        return result;
    }

    /**
     * Retrieve the details of your ship.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsResponse getMyShipsShipSymbol(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolResponse(context);
    }

    /**
     * Retrieve the details of your ship.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsResponse response from the API call
     */
    public CompletableFuture<MyShipsResponse> getMyShipsShipSymbolAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbol.
     */
    private HttpRequest buildGetMyShipsShipSymbolRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbol.
     * @return An object of type MyShipsResponse
     */
    private MyShipsResponse handleGetMyShipsShipSymbolResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsResponse result = ApiHelper.deserialize(responseBody,
                MyShipsResponse.class);

        return result;
    }

    /**
     * Retrieve all of your ships.
     * @return    Returns the MyShipsResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsResponse1 getMyShips() throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsResponse(context);
    }

    /**
     * Retrieve all of your ships.
     * @return    Returns the MyShipsResponse1 response from the API call
     */
    public CompletableFuture<MyShipsResponse1> getMyShipsAsync() {
        return makeHttpCallAsync(() -> buildGetMyShipsRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShips.
     */
    private HttpRequest buildGetMyShipsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShips.
     * @return An object of type MyShipsResponse1
     */
    private MyShipsResponse1 handleGetMyShipsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsResponse1.class);

        return result;
    }

}