/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyContractsAcceptResponse;
import io.spacetraders.alpha.v200.models.MyContractsResponse;
import io.spacetraders.alpha.v200.models.MyContractsResponse1;
import io.spacetraders.alpha.v200.models.MyShipsDeliverRequest;
import io.spacetraders.alpha.v200.models.MyShipsDeliverResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ContractsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public ContractsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public ContractsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Deliver cargo on a given contract.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsDeliverResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsDeliverResponse postMyShipsShipSymbolDeliver(
            final String shipSymbol,
            final MyShipsDeliverRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolDeliverRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolDeliverResponse(context);
    }

    /**
     * Deliver cargo on a given contract.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsDeliverResponse response from the API call
     */
    public CompletableFuture<MyShipsDeliverResponse> postMyShipsShipSymbolDeliverAsync(
            final String shipSymbol,
            final MyShipsDeliverRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolDeliverRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolDeliverResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolDeliver.
     */
    private HttpRequest buildPostMyShipsShipSymbolDeliverRequest(
            final String shipSymbol,
            final MyShipsDeliverRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/deliver");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolDeliver.
     * @return An object of type MyShipsDeliverResponse
     */
    private MyShipsDeliverResponse handlePostMyShipsShipSymbolDeliverResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsDeliverResponse result = ApiHelper.deserialize(responseBody,
                MyShipsDeliverResponse.class);

        return result;
    }

    /**
     * List all of your contracts.
     * @return    Returns the MyContractsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyContractsResponse getMyContracts() throws ApiException, IOException {
        HttpRequest request = buildGetMyContractsRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyContractsResponse(context);
    }

    /**
     * List all of your contracts.
     * @return    Returns the MyContractsResponse response from the API call
     */
    public CompletableFuture<MyContractsResponse> getMyContractsAsync() {
        return makeHttpCallAsync(() -> buildGetMyContractsRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyContractsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyContracts.
     */
    private HttpRequest buildGetMyContractsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/contracts");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyContracts.
     * @return An object of type MyContractsResponse
     */
    private MyContractsResponse handleGetMyContractsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyContractsResponse result = ApiHelper.deserialize(responseBody,
                MyContractsResponse.class);

        return result;
    }

    /**
     * Get the details of a contract by ID.
     * @param  contractId  Required parameter: The contract ID
     * @return    Returns the MyContractsResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyContractsResponse1 getMyContractsContractId(
            final String contractId) throws ApiException, IOException {
        HttpRequest request = buildGetMyContractsContractIdRequest(contractId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyContractsContractIdResponse(context);
    }

    /**
     * Get the details of a contract by ID.
     * @param  contractId  Required parameter: The contract ID
     * @return    Returns the MyContractsResponse1 response from the API call
     */
    public CompletableFuture<MyContractsResponse1> getMyContractsContractIdAsync(
            final String contractId) {
        return makeHttpCallAsync(() -> buildGetMyContractsContractIdRequest(contractId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyContractsContractIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyContractsContractId.
     */
    private HttpRequest buildGetMyContractsContractIdRequest(
            final String contractId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/contracts/{contractId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("contractId",
                new SimpleEntry<Object, Boolean>(contractId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyContractsContractId.
     * @return An object of type MyContractsResponse1
     */
    private MyContractsResponse1 handleGetMyContractsContractIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyContractsResponse1 result = ApiHelper.deserialize(responseBody,
                MyContractsResponse1.class);

        return result;
    }

    /**
     * Accept a contract.
     * @param  contractId  Required parameter: Example:
     * @return    Returns the MyContractsAcceptResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyContractsAcceptResponse postMyContractsContractIdAccept(
            final String contractId) throws ApiException, IOException {
        HttpRequest request = buildPostMyContractsContractIdAcceptRequest(contractId);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyContractsContractIdAcceptResponse(context);
    }

    /**
     * Accept a contract.
     * @param  contractId  Required parameter: Example:
     * @return    Returns the MyContractsAcceptResponse response from the API call
     */
    public CompletableFuture<MyContractsAcceptResponse> postMyContractsContractIdAcceptAsync(
            final String contractId) {
        return makeHttpCallAsync(() -> buildPostMyContractsContractIdAcceptRequest(contractId),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyContractsContractIdAcceptResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyContractsContractIdAccept.
     */
    private HttpRequest buildPostMyContractsContractIdAcceptRequest(
            final String contractId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/contracts/{contractId}/accept");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("contractId",
                new SimpleEntry<Object, Boolean>(contractId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyContractsContractIdAccept.
     * @return An object of type MyContractsAcceptResponse
     */
    private MyContractsAcceptResponse handlePostMyContractsContractIdAcceptResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyContractsAcceptResponse result = ApiHelper.deserialize(responseBody,
                MyContractsAcceptResponse.class);

        return result;
    }

}