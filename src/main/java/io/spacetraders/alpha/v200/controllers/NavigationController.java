/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsDockResponse;
import io.spacetraders.alpha.v200.models.MyShipsJumpRequest;
import io.spacetraders.alpha.v200.models.MyShipsJumpResponse;
import io.spacetraders.alpha.v200.models.MyShipsJumpResponse1;
import io.spacetraders.alpha.v200.models.MyShipsNavigateRequest;
import io.spacetraders.alpha.v200.models.MyShipsNavigateResponse;
import io.spacetraders.alpha.v200.models.MyShipsNavigateResponse1;
import io.spacetraders.alpha.v200.models.MyShipsOrbitResponse;
import io.spacetraders.alpha.v200.models.MyShipsRefuelResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class NavigationController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public NavigationController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public NavigationController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Transition your ship from orbit to docked. Consecutive calls to this endpoint will succeed.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsDockResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsDockResponse postMyShipsShipSymbolDock(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolDockRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolDockResponse(context);
    }

    /**
     * Transition your ship from orbit to docked. Consecutive calls to this endpoint will succeed.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsDockResponse response from the API call
     */
    public CompletableFuture<MyShipsDockResponse> postMyShipsShipSymbolDockAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolDockRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolDockResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolDock.
     */
    private HttpRequest buildPostMyShipsShipSymbolDockRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/dock");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolDock.
     * @return An object of type MyShipsDockResponse
     */
    private MyShipsDockResponse handlePostMyShipsShipSymbolDockResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsDockResponse result = ApiHelper.deserialize(responseBody,
                MyShipsDockResponse.class);

        return result;
    }

    /**
     * Transition your ship from docked into orbit. Ships are placed into orbit by default when
     * arriving at a destination. Consecutive calls to this endpoint will continue to return a 200
     * response status.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsOrbitResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsOrbitResponse postMyShipsShipSymbolOrbit(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolOrbitRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolOrbitResponse(context);
    }

    /**
     * Transition your ship from docked into orbit. Ships are placed into orbit by default when
     * arriving at a destination. Consecutive calls to this endpoint will continue to return a 200
     * response status.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsOrbitResponse response from the API call
     */
    public CompletableFuture<MyShipsOrbitResponse> postMyShipsShipSymbolOrbitAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolOrbitRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolOrbitResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolOrbit.
     */
    private HttpRequest buildPostMyShipsShipSymbolOrbitRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/orbit");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolOrbit.
     * @return An object of type MyShipsOrbitResponse
     */
    private MyShipsOrbitResponse handlePostMyShipsShipSymbolOrbitResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsOrbitResponse result = ApiHelper.deserialize(responseBody,
                MyShipsOrbitResponse.class);

        return result;
    }

    /**
     * Jump Ship.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsJumpResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsJumpResponse postMyShipsShipSymbolJump(
            final String shipSymbol,
            final MyShipsJumpRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolJumpRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolJumpResponse(context);
    }

    /**
     * Jump Ship.
     * @param  shipSymbol  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsJumpResponse response from the API call
     */
    public CompletableFuture<MyShipsJumpResponse> postMyShipsShipSymbolJumpAsync(
            final String shipSymbol,
            final MyShipsJumpRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolJumpRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolJumpResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolJump.
     */
    private HttpRequest buildPostMyShipsShipSymbolJumpRequest(
            final String shipSymbol,
            final MyShipsJumpRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/jump");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolJump.
     * @return An object of type MyShipsJumpResponse
     */
    private MyShipsJumpResponse handlePostMyShipsShipSymbolJumpResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsJumpResponse result = ApiHelper.deserialize(responseBody,
                MyShipsJumpResponse.class);

        return result;
    }

    /**
     * Jump Cooldown.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsJumpResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsJumpResponse1 getMyShipsShipSymbolJump(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolJumpRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolJumpResponse(context);
    }

    /**
     * Jump Cooldown.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsJumpResponse1 response from the API call
     */
    public CompletableFuture<MyShipsJumpResponse1> getMyShipsShipSymbolJumpAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolJumpRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolJumpResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbolJump.
     */
    private HttpRequest buildGetMyShipsShipSymbolJumpRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/jump");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbolJump.
     * @return An object of type MyShipsJumpResponse1
     */
    private MyShipsJumpResponse1 handleGetMyShipsShipSymbolJumpResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsJumpResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsJumpResponse1.class);

        return result;
    }

    /**
     * Refuel Ship.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsRefuelResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsRefuelResponse postMyShipsShipSymbolRefuel(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolRefuelRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolRefuelResponse(context);
    }

    /**
     * Refuel Ship.
     * @param  shipSymbol  Required parameter: Example:
     * @return    Returns the MyShipsRefuelResponse response from the API call
     */
    public CompletableFuture<MyShipsRefuelResponse> postMyShipsShipSymbolRefuelAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolRefuelRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolRefuelResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolRefuel.
     */
    private HttpRequest buildPostMyShipsShipSymbolRefuelRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/refuel");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolRefuel.
     * @return An object of type MyShipsRefuelResponse
     */
    private MyShipsRefuelResponse handlePostMyShipsShipSymbolRefuelResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsRefuelResponse result = ApiHelper.deserialize(responseBody,
                MyShipsRefuelResponse.class);

        return result;
    }

    /**
     * Navigate Ship.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsNavigateResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsNavigateResponse postMyShipsShipSymbolNavigate(
            final String shipSymbol,
            final MyShipsNavigateRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolNavigateRequest(shipSymbol, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolNavigateResponse(context);
    }

    /**
     * Navigate Ship.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @param  body  Optional parameter: Example:
     * @return    Returns the MyShipsNavigateResponse response from the API call
     */
    public CompletableFuture<MyShipsNavigateResponse> postMyShipsShipSymbolNavigateAsync(
            final String shipSymbol,
            final MyShipsNavigateRequest body) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolNavigateRequest(shipSymbol, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolNavigateResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolNavigate.
     */
    private HttpRequest buildPostMyShipsShipSymbolNavigateRequest(
            final String shipSymbol,
            final MyShipsNavigateRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/navigate");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolNavigate.
     * @return An object of type MyShipsNavigateResponse
     */
    private MyShipsNavigateResponse handlePostMyShipsShipSymbolNavigateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsNavigateResponse result = ApiHelper.deserialize(responseBody,
                MyShipsNavigateResponse.class);

        return result;
    }

    /**
     * Get the status of your last navigation.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @return    Returns the MyShipsNavigateResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsNavigateResponse1 getMyShipsShipSymbolNavigate(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetMyShipsShipSymbolNavigateRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyShipsShipSymbolNavigateResponse(context);
    }

    /**
     * Get the status of your last navigation.
     * @param  shipSymbol  Required parameter: The ship symbol
     * @return    Returns the MyShipsNavigateResponse1 response from the API call
     */
    public CompletableFuture<MyShipsNavigateResponse1> getMyShipsShipSymbolNavigateAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildGetMyShipsShipSymbolNavigateRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyShipsShipSymbolNavigateResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyShipsShipSymbolNavigate.
     */
    private HttpRequest buildGetMyShipsShipSymbolNavigateRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/navigate");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyShipsShipSymbolNavigate.
     * @return An object of type MyShipsNavigateResponse1
     */
    private MyShipsNavigateResponse1 handleGetMyShipsShipSymbolNavigateResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsNavigateResponse1 result = ApiHelper.deserialize(responseBody,
                MyShipsNavigateResponse1.class);

        return result;
    }

}