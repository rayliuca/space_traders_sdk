/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.AgentsRequest;
import io.spacetraders.alpha.v200.models.AgentsResponse;
import io.spacetraders.alpha.v200.models.MyAgentResponse;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AgentsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AgentsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AgentsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your
     * starting faction if you don't know any other factions to choose from. The agent symbol is a
     * 4-8 character string that will represent your agent. This symbol will prefix the symbol of
     * every ship you own. Agent symbols will be cast to all uppercase characters. A new agent will
     * be granted an authorization token, a contract with their starting faction, a command ship
     * with a jump drive, and one hundred thousand credits. &gt; #### Keep your token safe and secure &gt;
     * &gt; Save your token during the alpha phase. There is no way to regenerate this token without
     * starting a new agent. In the future you will be able to generate and manage your tokens from
     * the SpaceTraders website. You can accept your contract using the
     * `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to
     * a nearby asteroid field waypoint, and execute the `/my/ships/{shipSymbol}/accept` endpoint to
     * mine various types of ores and minerals. Return to the contract destination and execute the
     * `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract. When your
     * contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
     * @param  body  Optional parameter: Example:
     * @return    Returns the AgentsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AgentsResponse postAgents(
            final AgentsRequest body) throws ApiException, IOException {
        HttpRequest request = buildPostAgentsRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostAgentsResponse(context);
    }

    /**
     * Creates a new agent and ties it to a temporary Account. Use `COMMERCE_REPUBLIC` as your
     * starting faction if you don't know any other factions to choose from. The agent symbol is a
     * 4-8 character string that will represent your agent. This symbol will prefix the symbol of
     * every ship you own. Agent symbols will be cast to all uppercase characters. A new agent will
     * be granted an authorization token, a contract with their starting faction, a command ship
     * with a jump drive, and one hundred thousand credits. &gt; #### Keep your token safe and secure &gt;
     * &gt; Save your token during the alpha phase. There is no way to regenerate this token without
     * starting a new agent. In the future you will be able to generate and manage your tokens from
     * the SpaceTraders website. You can accept your contract using the
     * `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to
     * a nearby asteroid field waypoint, and execute the `/my/ships/{shipSymbol}/accept` endpoint to
     * mine various types of ores and minerals. Return to the contract destination and execute the
     * `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract. When your
     * contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
     * @param  body  Optional parameter: Example:
     * @return    Returns the AgentsResponse response from the API call
     */
    public CompletableFuture<AgentsResponse> postAgentsAsync(
            final AgentsRequest body) {
        return makeHttpCallAsync(() -> buildPostAgentsRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostAgentsResponse(context));
    }

    /**
     * Builds the HttpRequest object for postAgents.
     */
    private HttpRequest buildPostAgentsRequest(
            final AgentsRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/agents");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postAgents.
     * @return An object of type AgentsResponse
     */
    private AgentsResponse handlePostAgentsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        AgentsResponse result = ApiHelper.deserialize(responseBody,
                AgentsResponse.class);

        return result;
    }

    /**
     * Fetch your agent's details.
     * @return    Returns the MyAgentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyAgentResponse getMyAgent() throws ApiException, IOException {
        HttpRequest request = buildGetMyAgentRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetMyAgentResponse(context);
    }

    /**
     * Fetch your agent's details.
     * @return    Returns the MyAgentResponse response from the API call
     */
    public CompletableFuture<MyAgentResponse> getMyAgentAsync() {
        return makeHttpCallAsync(() -> buildGetMyAgentRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetMyAgentResponse(context));
    }

    /**
     * Builds the HttpRequest object for getMyAgent.
     */
    private HttpRequest buildGetMyAgentRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/agent");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getMyAgent.
     * @return An object of type MyAgentResponse
     */
    private MyAgentResponse handleGetMyAgentResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyAgentResponse result = ApiHelper.deserialize(responseBody,
                MyAgentResponse.class);

        return result;
    }

}