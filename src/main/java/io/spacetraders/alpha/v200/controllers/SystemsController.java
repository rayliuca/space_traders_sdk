/*
 * SpaceTradersAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.spacetraders.alpha.v200.controllers;

import io.spacetraders.alpha.v200.ApiHelper;
import io.spacetraders.alpha.v200.AuthManager;
import io.spacetraders.alpha.v200.Configuration;
import io.spacetraders.alpha.v200.exceptions.ApiException;
import io.spacetraders.alpha.v200.http.Headers;
import io.spacetraders.alpha.v200.http.client.HttpCallback;
import io.spacetraders.alpha.v200.http.client.HttpClient;
import io.spacetraders.alpha.v200.http.client.HttpContext;
import io.spacetraders.alpha.v200.http.request.HttpRequest;
import io.spacetraders.alpha.v200.http.response.HttpResponse;
import io.spacetraders.alpha.v200.http.response.HttpStringResponse;
import io.spacetraders.alpha.v200.models.MyShipsChartResponse;
import io.spacetraders.alpha.v200.models.SystemsResponse;
import io.spacetraders.alpha.v200.models.SystemsResponse1;
import io.spacetraders.alpha.v200.models.SystemsWaypointsResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SystemsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public SystemsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public SystemsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Chart a new system or waypoint. Returns an array of the symbols that have been charted,
     * including the system and the waypoint if both were uncharted, or just the waypoint.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsChartResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public MyShipsChartResponse postMyShipsShipSymbolChart(
            final String shipSymbol) throws ApiException, IOException {
        HttpRequest request = buildPostMyShipsShipSymbolChartRequest(shipSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePostMyShipsShipSymbolChartResponse(context);
    }

    /**
     * Chart a new system or waypoint. Returns an array of the symbols that have been charted,
     * including the system and the waypoint if both were uncharted, or just the waypoint.
     * @param  shipSymbol  Required parameter: The symbol of the ship
     * @return    Returns the MyShipsChartResponse response from the API call
     */
    public CompletableFuture<MyShipsChartResponse> postMyShipsShipSymbolChartAsync(
            final String shipSymbol) {
        return makeHttpCallAsync(() -> buildPostMyShipsShipSymbolChartRequest(shipSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handlePostMyShipsShipSymbolChartResponse(context));
    }

    /**
     * Builds the HttpRequest object for postMyShipsShipSymbolChart.
     */
    private HttpRequest buildPostMyShipsShipSymbolChartRequest(
            final String shipSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/my/ships/{shipSymbol}/chart");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("shipSymbol",
                new SimpleEntry<Object, Boolean>(shipSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for postMyShipsShipSymbolChart.
     * @return An object of type MyShipsChartResponse
     */
    private MyShipsChartResponse handlePostMyShipsShipSymbolChartResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        MyShipsChartResponse result = ApiHelper.deserialize(responseBody,
                MyShipsChartResponse.class);

        return result;
    }

    /**
     * Return a list of all systems.
     * @return    Returns the SystemsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsResponse getSystems() throws ApiException, IOException {
        HttpRequest request = buildGetSystemsRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsResponse(context);
    }

    /**
     * Return a list of all systems.
     * @return    Returns the SystemsResponse response from the API call
     */
    public CompletableFuture<SystemsResponse> getSystemsAsync() {
        return makeHttpCallAsync(() -> buildGetSystemsRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystems.
     */
    private HttpRequest buildGetSystemsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystems.
     * @return An object of type SystemsResponse
     */
    private SystemsResponse handleGetSystemsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsResponse result = ApiHelper.deserialize(responseBody,
                SystemsResponse.class);

        return result;
    }

    /**
     * View System.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsResponse1 response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsResponse1 getSystemsSystemSymbol(
            final String systemSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolRequest(systemSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolResponse(context);
    }

    /**
     * View System.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsResponse1 response from the API call
     */
    public CompletableFuture<SystemsResponse1> getSystemsSystemSymbolAsync(
            final String systemSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolRequest(systemSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbol.
     */
    private HttpRequest buildGetSystemsSystemSymbolRequest(
            final String systemSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbol.
     * @return An object of type SystemsResponse1
     */
    private SystemsResponse1 handleGetSystemsSystemSymbolResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsResponse1 result = ApiHelper.deserialize(responseBody,
                SystemsResponse1.class);

        return result;
    }

    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be
     * present to return waypoint details.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsWaypointsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsWaypointsResponse getSystemsSystemSymbolWaypointsWaypointSymbol(
            final String systemSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolWaypointsWaypointSymbolRequest(
                systemSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolWaypointsWaypointSymbolResponse(context);
    }

    /**
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be
     * present to return waypoint details.
     * @param  systemSymbol  Required parameter: The system symbol
     * @return    Returns the SystemsWaypointsResponse response from the API call
     */
    public CompletableFuture<SystemsWaypointsResponse> getSystemsSystemSymbolWaypointsWaypointSymbolAsync(
            final String systemSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolWaypointsWaypointSymbolRequest(
                systemSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolWaypointsWaypointSymbolResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolWaypointsWaypointSymbol.
     */
    private HttpRequest buildGetSystemsSystemSymbolWaypointsWaypointSymbolRequest(
            final String systemSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/waypoints");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolWaypointsWaypointSymbol.
     * @return An object of type SystemsWaypointsResponse
     */
    private SystemsWaypointsResponse handleGetSystemsSystemSymbolWaypointsWaypointSymbolResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsWaypointsResponse result = ApiHelper.deserialize(responseBody,
                SystemsWaypointsResponse.class);

        return result;
    }

    /**
     * View the details of a waypoint.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsWaypointsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SystemsWaypointsResponse getSystemsSystemSymbolWaypoints(
            final String systemSymbol,
            final String waypointSymbol) throws ApiException, IOException {
        HttpRequest request = buildGetSystemsSystemSymbolWaypointsRequest(systemSymbol,
                waypointSymbol);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSystemsSystemSymbolWaypointsResponse(context);
    }

    /**
     * View the details of a waypoint.
     * @param  systemSymbol  Required parameter: The system symbol
     * @param  waypointSymbol  Required parameter: The waypoint symbol
     * @return    Returns the SystemsWaypointsResponse response from the API call
     */
    public CompletableFuture<SystemsWaypointsResponse> getSystemsSystemSymbolWaypointsAsync(
            final String systemSymbol,
            final String waypointSymbol) {
        return makeHttpCallAsync(() -> buildGetSystemsSystemSymbolWaypointsRequest(systemSymbol,
                waypointSymbol),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSystemsSystemSymbolWaypointsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSystemsSystemSymbolWaypoints.
     */
    private HttpRequest buildGetSystemsSystemSymbolWaypointsRequest(
            final String systemSymbol,
            final String waypointSymbol) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/systems/{systemSymbol}/waypoints/{waypointSymbol}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("systemSymbol",
                new SimpleEntry<Object, Boolean>(systemSymbol, true));
        templateParameters.put("waypointSymbol",
                new SimpleEntry<Object, Boolean>(waypointSymbol, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSystemsSystemSymbolWaypoints.
     * @return An object of type SystemsWaypointsResponse
     */
    private SystemsWaypointsResponse handleGetSystemsSystemSymbolWaypointsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SystemsWaypointsResponse result = ApiHelper.deserialize(responseBody,
                SystemsWaypointsResponse.class);

        return result;
    }

}