# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.api_helper import APIHelper
from spacetradersapi.configuration import Server
from spacetradersapi.controllers.base_controller import BaseController
from spacetradersapi.models.agents_response import AgentsResponse
from spacetradersapi.models.my_agent_response import MyAgentResponse


class AgentsController(BaseController):

    """A Controller to access Endpoints in the spacetradersapi API."""
    def __init__(self, config, auth_managers):
        super(AgentsController, self).__init__(config, auth_managers)

    def post_agents(self,
                    body=None):
        """Does a POST request to /agents.

        Creates a new agent and ties it to a temporary Account. Use
        `COMMERCE_REPUBLIC` as your starting faction if you don't know any
        other factions to choose from.
        The agent symbol is a 4-8 character string that will represent your
        agent. This symbol will prefix the symbol of every ship you own. Agent
        symbols will be cast to all uppercase characters.
        A new agent will be granted an authorization token, a contract with
        their starting faction, a command ship with a jump drive, and one
        hundred thousand credits.
        > #### Keep your token safe and secure
        >
        > Save your token during the alpha phase. There is no way to
        regenerate this token without starting a new agent. In the future you
        will be able to generate and manage your tokens from the SpaceTraders
        website.
        You can accept your contract using the
        `/my/contracts/{contractId}/accept` endpoint. You will want to
        navigate your command ship to a nearby asteroid field waypoint, and
        execute the `/my/ships/{shipSymbol}/accept` endpoint to mine various
        types of ores and minerals.
        Return to the contract destination and execute the
        `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the
        contract.
        When your contract is fulfilled, you can call
        `/my/contracts/{contractId}/fulfill` to retrieve payment.

        Args:
            body (AgentsRequest, optional): TODO: type description here.

        Returns:
            AgentsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/agents'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AgentsResponse.from_dictionary)

        return decoded

    def get_my_agent(self):
        """Does a GET request to /my/agent.

        Fetch your agent's details.

        Returns:
            MyAgentResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/agent'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyAgentResponse.from_dictionary)

        return decoded
