# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.api_helper import APIHelper
from spacetradersapi.configuration import Server
from spacetradersapi.controllers.base_controller import BaseController
from spacetradersapi.models.my_ships_extract_response import MyShipsExtractResponse
from spacetradersapi.models.my_ships_extract_response_1 import MyShipsExtractResponse1
from spacetradersapi.models.my_ships_survey_response import MyShipsSurveyResponse
from spacetradersapi.models.my_ships_survey_response_1 import MyShipsSurveyResponse1


class ExtractController(BaseController):

    """A Controller to access Endpoints in the spacetradersapi API."""
    def __init__(self, config, auth_managers):
        super(ExtractController, self).__init__(config, auth_managers)

    def post_my_ships_ship_symbol_extract(self,
                                          ship_symbol,
                                          body=None):
        """Does a POST request to /my/ships/{shipSymbol}/extract.

        Extract resources from the waypoint into your ship. Send a survey as
        the payload to target specific yields. The entire survey must be sent
        as it contains a signature that the backend verifies.

        Args:
            ship_symbol (string): The ship symbol
            body (MyShipsExtractRequest, optional): TODO: type description
                here.

        Returns:
            MyShipsExtractResponse: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/extract'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsExtractResponse.from_dictionary)

        return decoded

    def get_my_ships_ship_symbol_extract(self,
                                         ship_symbol):
        """Does a GET request to /my/ships/{shipSymbol}/extract.

        Get the status of your last extraction.

        Args:
            ship_symbol (string): The ship symbol

        Returns:
            MyShipsExtractResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/extract'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsExtractResponse1.from_dictionary)

        return decoded

    def post_my_ships_ship_symbol_survey(self,
                                         ship_symbol):
        """Does a POST request to /my/ships/{shipSymbol}/survey.

        If you want to target specific yields for an extraction, you can
        survey a waypoint, such as an asteroid field, and send the survey in
        the body of the extract request. Each survey may have multiple
        deposits, and if a symbol shows up more than once, that indicates a
        higher chance of extracting that resource.
        Your ship will enter a cooldown between consecutive survey requests.
        Surveys will eventually expire after a period of time. Multiple ships
        can use the same survey for extraction.

        Args:
            ship_symbol (string): TODO: type description here.

        Returns:
            MyShipsSurveyResponse: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/survey'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsSurveyResponse.from_dictionary)

        return decoded

    def get_my_ships_ship_symbol_survey(self,
                                        ship_symbol):
        """Does a GET request to /my/ships/{shipSymbol}/survey.

        Executing a survey will initiate a cooldown for a number of seconds
        before you can call it again. This endpoint returns the details of
        your cooldown, or a 404 if there is no cooldown for the survey
        action.

        Args:
            ship_symbol (string): TODO: type description here.

        Returns:
            MyShipsSurveyResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/survey'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsSurveyResponse1.from_dictionary)

        return decoded
