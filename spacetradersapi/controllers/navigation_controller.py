# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.api_helper import APIHelper
from spacetradersapi.configuration import Server
from spacetradersapi.controllers.base_controller import BaseController
from spacetradersapi.models.my_ships_dock_response import MyShipsDockResponse
from spacetradersapi.models.my_ships_orbit_response import MyShipsOrbitResponse
from spacetradersapi.models.my_ships_jump_response import MyShipsJumpResponse
from spacetradersapi.models.my_ships_jump_response_1 import MyShipsJumpResponse1
from spacetradersapi.models.my_ships_refuel_response import MyShipsRefuelResponse
from spacetradersapi.models.my_ships_navigate_response import MyShipsNavigateResponse
from spacetradersapi.models.my_ships_navigate_response_1 import MyShipsNavigateResponse1


class NavigationController(BaseController):

    """A Controller to access Endpoints in the spacetradersapi API."""
    def __init__(self, config, auth_managers):
        super(NavigationController, self).__init__(config, auth_managers)

    def post_my_ships_ship_symbol_dock(self,
                                       ship_symbol):
        """Does a POST request to /my/ships/{shipSymbol}/dock.

        Transition your ship from orbit to docked. Consecutive calls to this
        endpoint will succeed.

        Args:
            ship_symbol (string): The symbol of the ship

        Returns:
            MyShipsDockResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/dock'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsDockResponse.from_dictionary)

        return decoded

    def post_my_ships_ship_symbol_orbit(self,
                                        ship_symbol):
        """Does a POST request to /my/ships/{shipSymbol}/orbit.

        Transition your ship from docked into orbit. Ships are placed into
        orbit by default when arriving at a destination. Consecutive calls to
        this endpoint will continue to return a 200 response status.

        Args:
            ship_symbol (string): The symbol of the ship

        Returns:
            MyShipsOrbitResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/orbit'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsOrbitResponse.from_dictionary)

        return decoded

    def post_my_ships_ship_symbol_jump(self,
                                       ship_symbol,
                                       body=None):
        """Does a POST request to /my/ships/{shipSymbol}/jump.

        Jump Ship

        Args:
            ship_symbol (string): TODO: type description here.
            body (MyShipsJumpRequest, optional): TODO: type description here.

        Returns:
            MyShipsJumpResponse: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/jump'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsJumpResponse.from_dictionary)

        return decoded

    def get_my_ships_ship_symbol_jump(self,
                                      ship_symbol):
        """Does a GET request to /my/ships/{shipSymbol}/jump.

        Jump Cooldown

        Args:
            ship_symbol (string): TODO: type description here.

        Returns:
            MyShipsJumpResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/jump'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsJumpResponse1.from_dictionary)

        return decoded

    def post_my_ships_ship_symbol_refuel(self,
                                         ship_symbol):
        """Does a POST request to /my/ships/{shipSymbol}/refuel.

        Refuel Ship

        Args:
            ship_symbol (string): TODO: type description here.

        Returns:
            MyShipsRefuelResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/refuel'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsRefuelResponse.from_dictionary)

        return decoded

    def post_my_ships_ship_symbol_navigate(self,
                                           ship_symbol,
                                           body=None):
        """Does a POST request to /my/ships/{shipSymbol}/navigate.

        Navigate Ship

        Args:
            ship_symbol (string): The ship symbol
            body (MyShipsNavigateRequest, optional): TODO: type description
                here.

        Returns:
            MyShipsNavigateResponse: Response from the API. Created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/navigate'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsNavigateResponse.from_dictionary)

        return decoded

    def get_my_ships_ship_symbol_navigate(self,
                                          ship_symbol):
        """Does a GET request to /my/ships/{shipSymbol}/navigate.

        Get the status of your last navigation.

        Args:
            ship_symbol (string): The ship symbol

        Returns:
            MyShipsNavigateResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/navigate'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsNavigateResponse1.from_dictionary)

        return decoded
