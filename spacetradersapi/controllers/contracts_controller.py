# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.api_helper import APIHelper
from spacetradersapi.configuration import Server
from spacetradersapi.controllers.base_controller import BaseController
from spacetradersapi.models.my_ships_deliver_response import MyShipsDeliverResponse
from spacetradersapi.models.my_contracts_response import MyContractsResponse
from spacetradersapi.models.my_contracts_response_1 import MyContractsResponse1
from spacetradersapi.models.my_contracts_accept_response import MyContractsAcceptResponse


class ContractsController(BaseController):

    """A Controller to access Endpoints in the spacetradersapi API."""
    def __init__(self, config, auth_managers):
        super(ContractsController, self).__init__(config, auth_managers)

    def post_my_ships_ship_symbol_deliver(self,
                                          ship_symbol,
                                          body=None):
        """Does a POST request to /my/ships/{shipSymbol}/deliver.

        Deliver cargo on a given contract.

        Args:
            ship_symbol (string): The symbol of the ship
            body (MyShipsDeliverRequest, optional): TODO: type description
                here.

        Returns:
            MyShipsDeliverResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships/{shipSymbol}/deliver'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'shipSymbol': {'value': ship_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsDeliverResponse.from_dictionary)

        return decoded

    def get_my_contracts(self):
        """Does a GET request to /my/contracts.

        List all of your contracts.

        Returns:
            MyContractsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/contracts'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyContractsResponse.from_dictionary)

        return decoded

    def get_my_contracts_contract_id(self,
                                     contract_id):
        """Does a GET request to /my/contracts/{contractId}.

        Get the details of a contract by ID.

        Args:
            contract_id (string): The contract ID

        Returns:
            MyContractsResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/contracts/{contractId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'contractId': {'value': contract_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyContractsResponse1.from_dictionary)

        return decoded

    def post_my_contracts_contract_id_accept(self,
                                             contract_id):
        """Does a POST request to /my/contracts/{contractId}/accept.

        Accept a contract.

        Args:
            contract_id (string): TODO: type description here.

        Returns:
            MyContractsAcceptResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/contracts/{contractId}/accept'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'contractId': {'value': contract_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyContractsAcceptResponse.from_dictionary)

        return decoded
