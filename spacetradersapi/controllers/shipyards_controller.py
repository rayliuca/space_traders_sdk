# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.api_helper import APIHelper
from spacetradersapi.configuration import Server
from spacetradersapi.controllers.base_controller import BaseController
from spacetradersapi.models.my_ships_response_2 import MyShipsResponse2
from spacetradersapi.models.systems_shipyards_response import SystemsShipyardsResponse
from spacetradersapi.models.systems_shipyards_response_1 import SystemsShipyardsResponse1
from spacetradersapi.models.systems_shipyards_ships_response import SystemsShipyardsShipsResponse


class ShipyardsController(BaseController):

    """A Controller to access Endpoints in the spacetradersapi API."""
    def __init__(self, config, auth_managers):
        super(ShipyardsController, self).__init__(config, auth_managers)

    def post_my_ships(self,
                      body=None):
        """Does a POST request to /my/ships.

        Purchase a ship

        Args:
            body (MyShipsRequest, optional): TODO: type description here.

        Returns:
            MyShipsResponse2: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my/ships'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MyShipsResponse2.from_dictionary)

        return decoded

    def get_systems_system_symbol_shipyards(self,
                                            system_symbol):
        """Does a GET request to /systems/{systemSymbol}/shipyards.

        Returns a list of all shipyards in a system.

        Args:
            system_symbol (string): the system symbol

        Returns:
            SystemsShipyardsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/systems/{systemSymbol}/shipyards'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'systemSymbol': {'value': system_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SystemsShipyardsResponse.from_dictionary)

        return decoded

    def get_systems_system_symbol_shipyards_waypoint_symbol(self,
                                                            system_symbol,
                                                            waypoint_symbol):
        """Does a GET request to /systems/{systemSymbol}/shipyards/{waypointSymbol}.

        Shipyard Details

        Args:
            system_symbol (string): The system symbol
            waypoint_symbol (string): The waypoint symbol

        Returns:
            SystemsShipyardsResponse1: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/systems/{systemSymbol}/shipyards/{waypointSymbol}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'systemSymbol': {'value': system_symbol, 'encode': True},
            'waypointSymbol': {'value': waypoint_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SystemsShipyardsResponse1.from_dictionary)

        return decoded

    def get_systems_system_symbol_shipyards_waypoint_symbol_ships(self,
                                                                  system_symbol,
                                                                  waypoint_symbol):
        """Does a GET request to /systems/{systemSymbol}/shipyards/{waypointSymbol}/ships.

        Shipyard Listings

        Args:
            system_symbol (string): The system symbol
            waypoint_symbol (string): The waypoint symbol

        Returns:
            SystemsShipyardsShipsResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/systems/{systemSymbol}/shipyards/{waypointSymbol}/ships'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'systemSymbol': {'value': system_symbol, 'encode': True},
            'waypointSymbol': {'value': waypoint_symbol, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SystemsShipyardsShipsResponse.from_dictionary)

        return decoded
