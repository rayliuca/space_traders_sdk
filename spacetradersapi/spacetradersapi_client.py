# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from spacetradersapi.decorators import lazy_property
from spacetradersapi.configuration import Configuration
from spacetradersapi.configuration import Environment
from spacetradersapi.http.auth.o_auth_2 import OAuth2
from spacetradersapi.controllers.ships_controller import ShipsController
from spacetradersapi.controllers.markets_controller import MarketsController
from spacetradersapi.controllers.trade_controller import TradeController
from spacetradersapi.controllers.navigation_controller\
    import NavigationController
from spacetradersapi.controllers.agents_controller import AgentsController
from spacetradersapi.controllers.contracts_controller\
    import ContractsController
from spacetradersapi.controllers.extract_controller import ExtractController
from spacetradersapi.controllers.systems_controller import SystemsController
from spacetradersapi.controllers.shipyards_controller\
    import ShipyardsController


class SpacetradersapiClient(object):

    auth = OAuth2

    @lazy_property
    def ships(self):
        return ShipsController(self.config, self.auth_managers)

    @lazy_property
    def markets(self):
        return MarketsController(self.config, self.auth_managers)

    @lazy_property
    def trade(self):
        return TradeController(self.config, self.auth_managers)

    @lazy_property
    def navigation(self):
        return NavigationController(self.config, self.auth_managers)

    @lazy_property
    def agents(self):
        return AgentsController(self.config, self.auth_managers)

    @lazy_property
    def contracts(self):
        return ContractsController(self.config, self.auth_managers)

    @lazy_property
    def extract(self):
        return ExtractController(self.config, self.auth_managers)

    @lazy_property
    def systems(self):
        return SystemsController(self.config, self.auth_managers)

    @lazy_property
    def shipyards(self):
        return ShipyardsController(self.config, self.auth_managers)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT'],
                 environment=Environment.PRODUCTION, access_token='',
                 config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment,
                                         access_token=access_token)
        else:
            self.config = config
        self.initialize_auth_managers(self.config)

    def initialize_auth_managers(self, config):
        self.auth_managers = { key: None for key in ['global']}
        self.auth_managers['global'] = OAuth2(config.access_token)
        return self.auth_managers
