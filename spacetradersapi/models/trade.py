# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Trade(object):

    """Implementation of the 'Trade' model.

    TODO: type model description here.

    Attributes:
        waypoint_symbol (string): TODO: type description here.
        trade_symbol (string): TODO: type description here.
        credits (int): TODO: type description here.
        units (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "waypoint_symbol": 'waypointSymbol',
        "trade_symbol": 'tradeSymbol',
        "credits": 'credits',
        "units": 'units'
    }

    def __init__(self,
                 waypoint_symbol=None,
                 trade_symbol=None,
                 credits=None,
                 units=None):
        """Constructor for the Trade class"""

        # Initialize members of the class
        self.waypoint_symbol = waypoint_symbol
        self.trade_symbol = trade_symbol
        self.credits = credits
        self.units = units

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        waypoint_symbol = dictionary.get('waypointSymbol')
        trade_symbol = dictionary.get('tradeSymbol')
        credits = dictionary.get('credits')
        units = dictionary.get('units')
        # Return an object of this model
        return cls(waypoint_symbol,
                   trade_symbol,
                   credits,
                   units)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
