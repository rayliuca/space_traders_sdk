# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spacetradersapi.models.agent import Agent
from spacetradersapi.models.contract import Contract
from spacetradersapi.models.faction import Faction
from spacetradersapi.models.ship import Ship
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Data1(object):

    """Implementation of the 'Data1' model.

    TODO: type model description here.

    Attributes:
        token (string): TODO: type description here.
        agent (Agent): TODO: type description here.
        faction (Faction): TODO: type description here.
        contract (Contract): TODO: type description here.
        ship (Ship): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "token": 'token',
        "agent": 'agent',
        "faction": 'faction',
        "contract": 'contract',
        "ship": 'ship'
    }

    def __init__(self,
                 token=None,
                 agent=None,
                 faction=None,
                 contract=None,
                 ship=None):
        """Constructor for the Data1 class"""

        # Initialize members of the class
        self.token = token
        self.agent = agent
        self.faction = faction
        self.contract = contract
        self.ship = ship

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        token = dictionary.get('token')
        agent = Agent.from_dictionary(dictionary.get('agent')) if dictionary.get('agent') else None
        faction = Faction.from_dictionary(dictionary.get('faction')) if dictionary.get('faction') else None
        contract = Contract.from_dictionary(dictionary.get('contract')) if dictionary.get('contract') else None
        ship = Ship.from_dictionary(dictionary.get('ship')) if dictionary.get('ship') else None
        # Return an object of this model
        return cls(token,
                   agent,
                   faction,
                   contract,
                   ship)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
