# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class System(object):

    """Implementation of the 'System' model.

    TODO: type model description here.

    Attributes:
        symbol (string): TODO: type description here.
        sector (string): TODO: type description here.
        mtype (string): TODO: type description here.
        x (int): TODO: type description here.
        y (int): TODO: type description here.
        waypoints (list of string): TODO: type description here.
        factions (list of string): TODO: type description here.
        charted (bool): TODO: type description here.
        charted_by (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "symbol": 'symbol',
        "sector": 'sector',
        "mtype": 'type',
        "x": 'x',
        "y": 'y',
        "waypoints": 'waypoints',
        "factions": 'factions',
        "charted": 'charted',
        "charted_by": 'chartedBy'
    }

    def __init__(self,
                 symbol=None,
                 sector=None,
                 mtype=None,
                 x=None,
                 y=None,
                 waypoints=None,
                 factions=None,
                 charted=None,
                 charted_by=None):
        """Constructor for the System class"""

        # Initialize members of the class
        self.symbol = symbol
        self.sector = sector
        self.mtype = mtype
        self.x = x
        self.y = y
        self.waypoints = waypoints
        self.factions = factions
        self.charted = charted
        self.charted_by = charted_by

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        symbol = dictionary.get('symbol')
        sector = dictionary.get('sector')
        mtype = dictionary.get('type')
        x = dictionary.get('x')
        y = dictionary.get('y')
        waypoints = dictionary.get('waypoints')
        factions = dictionary.get('factions')
        charted = dictionary.get('charted')
        charted_by = dictionary.get('chartedBy')
        # Return an object of this model
        return cls(symbol,
                   sector,
                   mtype,
                   x,
                   y,
                   waypoints,
                   factions,
                   charted,
                   charted_by)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
