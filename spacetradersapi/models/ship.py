# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spacetradersapi.models.cargo import Cargo
from spacetradersapi.models.integrity import Integrity
from spacetradersapi.models.registration_1 import Registration1
from spacetradersapi.models.stats import Stats
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Ship(object):

    """Implementation of the 'Ship' model.

    TODO: type model description here.

    Attributes:
        symbol (string): TODO: type description here.
        frame (string): TODO: type description here.
        reactor (string): TODO: type description here.
        engine (string): TODO: type description here.
        modules (list of string): TODO: type description here.
        mounts (list of string): TODO: type description here.
        registration (Registration1): TODO: type description here.
        integrity (Integrity): TODO: type description here.
        stats (Stats): TODO: type description here.
        status (string): TODO: type description here.
        location (string): TODO: type description here.
        cargo (list of Cargo): TODO: type description here.
        fuel (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "symbol": 'symbol',
        "frame": 'frame',
        "reactor": 'reactor',
        "engine": 'engine',
        "modules": 'modules',
        "mounts": 'mounts',
        "registration": 'registration',
        "integrity": 'integrity',
        "status": 'status',
        "location": 'location',
        "cargo": 'cargo',
        "fuel": 'fuel',
        "stats": 'stats'
    }

    def __init__(self,
                 symbol=None,
                 frame=None,
                 reactor=None,
                 engine=None,
                 modules=None,
                 mounts=None,
                 registration=None,
                 integrity=None,
                 status=None,
                 location=None,
                 cargo=None,
                 fuel=None,
                 stats=None):
        """Constructor for the Ship class"""

        # Initialize members of the class
        self.symbol = symbol
        self.frame = frame
        self.reactor = reactor
        self.engine = engine
        self.modules = modules
        self.mounts = mounts
        self.registration = registration
        self.integrity = integrity
        self.stats = stats
        self.status = status
        self.location = location
        self.cargo = cargo
        self.fuel = fuel

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        symbol = dictionary.get('symbol')
        frame = dictionary.get('frame')
        reactor = dictionary.get('reactor')
        engine = dictionary.get('engine')
        modules = dictionary.get('modules')
        mounts = dictionary.get('mounts')
        registration = Registration1.from_dictionary(dictionary.get('registration')) if dictionary.get('registration') else None
        integrity = Integrity.from_dictionary(dictionary.get('integrity')) if dictionary.get('integrity') else None
        status = dictionary.get('status')
        location = dictionary.get('location')
        cargo = None
        if dictionary.get('cargo') is not None:
            cargo = [Cargo.from_dictionary(x) for x in dictionary.get('cargo')]
        fuel = dictionary.get('fuel')
        stats = Stats.from_dictionary(dictionary.get('stats')) if dictionary.get('stats') else None
        # Return an object of this model
        return cls(symbol,
                   frame,
                   reactor,
                   engine,
                   modules,
                   mounts,
                   registration,
                   integrity,
                   status,
                   location,
                   cargo,
                   fuel,
                   stats)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
