# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Stats(object):

    """Implementation of the 'Stats' model.

    TODO: type model description here.

    Attributes:
        fuel_tank (int): TODO: type description here.
        cargo_limit (int): TODO: type description here.
        jump_range (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fuel_tank": 'fuelTank',
        "cargo_limit": 'cargoLimit',
        "jump_range": 'jumpRange'
    }

    def __init__(self,
                 fuel_tank=None,
                 cargo_limit=None,
                 jump_range=None):
        """Constructor for the Stats class"""

        # Initialize members of the class
        self.fuel_tank = fuel_tank
        self.cargo_limit = cargo_limit
        self.jump_range = jump_range

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        fuel_tank = dictionary.get('fuelTank')
        cargo_limit = dictionary.get('cargoLimit')
        jump_range = dictionary.get('jumpRange')
        # Return an object of this model
        return cls(fuel_tank,
                   cargo_limit,
                   jump_range)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
