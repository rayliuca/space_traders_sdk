# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Agent(object):

    """Implementation of the 'Agent' model.

    TODO: type model description here.

    Attributes:
        account_id (string): TODO: type description here.
        symbol (string): TODO: type description here.
        headquarters (string): TODO: type description here.
        credits (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_id": 'accountId',
        "symbol": 'symbol',
        "headquarters": 'headquarters',
        "credits": 'credits'
    }

    def __init__(self,
                 account_id=None,
                 symbol=None,
                 headquarters=None,
                 credits=None):
        """Constructor for the Agent class"""

        # Initialize members of the class
        self.account_id = account_id
        self.symbol = symbol
        self.headquarters = headquarters
        self.credits = credits

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_id = dictionary.get('accountId')
        symbol = dictionary.get('symbol')
        headquarters = dictionary.get('headquarters')
        credits = dictionary.get('credits')
        # Return an object of this model
        return cls(account_id,
                   symbol,
                   headquarters,
                   credits)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
