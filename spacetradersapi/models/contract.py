# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spacetradersapi.models.terms import Terms
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class Contract(object):

    """Implementation of the 'Contract' model.

    TODO: type model description here.

    Attributes:
        id (string): TODO: type description here.
        faction (string): TODO: type description here.
        mtype (string): TODO: type description here.
        terms (Terms): TODO: type description here.
        accepted (bool): TODO: type description here.
        fulfilled (bool): TODO: type description here.
        expires_at (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "faction": 'faction',
        "mtype": 'type',
        "terms": 'terms',
        "accepted": 'accepted',
        "fulfilled": 'fulfilled',
        "expires_at": 'expiresAt'
    }

    def __init__(self,
                 id=None,
                 faction=None,
                 mtype=None,
                 terms=None,
                 accepted=None,
                 fulfilled=None,
                 expires_at=None):
        """Constructor for the Contract class"""

        # Initialize members of the class
        self.id = id
        self.faction = faction
        self.mtype = mtype
        self.terms = terms
        self.accepted = accepted
        self.fulfilled = fulfilled
        self.expires_at = expires_at

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get('id')
        faction = dictionary.get('faction')
        mtype = dictionary.get('type')
        terms = Terms.from_dictionary(dictionary.get('terms')) if dictionary.get('terms') else None
        accepted = dictionary.get('accepted')
        fulfilled = dictionary.get('fulfilled')
        expires_at = dictionary.get('expiresAt')
        # Return an object of this model
        return cls(id,
                   faction,
                   mtype,
                   terms,
                   accepted,
                   fulfilled,
                   expires_at)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
