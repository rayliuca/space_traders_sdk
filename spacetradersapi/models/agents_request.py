# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class AgentsRequest(object):

    """Implementation of the 'Agents Request' model.

    TODO: type model description here.

    Attributes:
        symbol (string): How other agents will see your ships and
            information.
        faction (string): The faction you choose determines your
            headquarters.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "symbol": 'symbol',
        "faction": 'faction'
    }

    def __init__(self,
                 symbol=None,
                 faction='COMMERCE_REPUBLIC'):
        """Constructor for the AgentsRequest class"""

        # Initialize members of the class
        self.symbol = symbol
        self.faction = faction

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        symbol = dictionary.get('symbol')
        faction = dictionary.get("faction") if dictionary.get("faction") else 'COMMERCE_REPUBLIC'
        # Return an object of this model
        return cls(symbol,
                   faction)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
