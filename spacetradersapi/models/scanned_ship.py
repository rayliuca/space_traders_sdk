# -*- coding: utf-8 -*-

"""
spacetradersapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spacetradersapi.models.registration import Registration
import os
from spacetradersapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError
from spacetradersapi.api_helper import APIHelper


class ScannedShip(object):

    """Implementation of the 'ScannedShip' model.

    TODO: type model description here.

    Attributes:
        symbol (string): TODO: type description here.
        registration (Registration): TODO: type description here.
        frame_symbol (string): TODO: type description here.
        reactor_symbol (string): TODO: type description here.
        engine_symbol (string): TODO: type description here.
        expiration (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "symbol": 'symbol',
        "registration": 'registration',
        "frame_symbol": 'frameSymbol',
        "reactor_symbol": 'reactorSymbol',
        "engine_symbol": 'engineSymbol',
        "expiration": 'expiration'
    }

    def __init__(self,
                 symbol=None,
                 registration=None,
                 frame_symbol=None,
                 reactor_symbol=None,
                 engine_symbol=None,
                 expiration=None):
        """Constructor for the ScannedShip class"""

        # Initialize members of the class
        self.symbol = symbol
        self.registration = registration
        self.frame_symbol = frame_symbol
        self.reactor_symbol = reactor_symbol
        self.engine_symbol = engine_symbol
        self.expiration = expiration

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        symbol = dictionary.get('symbol')
        registration = Registration.from_dictionary(dictionary.get('registration')) if dictionary.get('registration') else None
        frame_symbol = dictionary.get('frameSymbol')
        reactor_symbol = dictionary.get('reactorSymbol')
        engine_symbol = dictionary.get('engineSymbol')
        expiration = dictionary.get('expiration')
        # Return an object of this model
        return cls(symbol,
                   registration,
                   frame_symbol,
                   reactor_symbol,
                   engine_symbol,
                   expiration)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__))).is_valid(val)
